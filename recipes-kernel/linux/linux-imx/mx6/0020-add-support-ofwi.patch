From 58f153ef8677ef3a01eee6b49ee88d271a46a5ec Mon Sep 17 00:00:00 2001
From: Your Name <Your Email>
Date: Tue, 6 Oct 2015 12:34:17 +0200
Subject: [PATCH 20/27] add-support-ofwi

---
 arch/arm/boot/dts/Makefile.rej     |    9 +--
 arch/arm/boot/dts/imx6dl-ofwi.dts  |  119 +++++++++++++++++++++++++++++++++++
 arch/arm/boot/dts/imx6q-ofwi.dts   |  121 ++++++++++++++++++++++++++++++++++++
 drivers/input/touchscreen/st1232.c |   80 +++++++++++++++++++++---
 4 files changed, 318 insertions(+), 11 deletions(-)
 create mode 100644 arch/arm/boot/dts/imx6dl-ofwi.dts
 create mode 100644 arch/arm/boot/dts/imx6q-ofwi.dts

diff --git a/arch/arm/boot/dts/Makefile.rej b/arch/arm/boot/dts/Makefile.rej
index 714b051..0fd66b3 100644
--- a/arch/arm/boot/dts/Makefile.rej
+++ b/arch/arm/boot/dts/Makefile.rej
@@ -1,11 +1,12 @@
 --- arch/arm/boot/dts/Makefile
 +++ arch/arm/boot/dts/Makefile
-@@ -119,6 +119,8 @@
- 	imx6q-icore.dtb \
+@@ -120,7 +120,9 @@
  	imx6dl-ofres.dtb \
  	imx6q-ofres.dtb \
-+	imx6dl-ofcap.dtb \
-+	imx6q-ofcap.dtb \
+ 	imx6dl-ofcap.dtb \
++	imx6dl-ofwi.dtb \
+ 	imx6q-ofcap.dtb \
++	imx6q-ofwi.dtb \
  	imx6dl-sabreauto.dtb \
  	imx6dl-sabreauto-ecspi.dtb \
  	imx6dl-sabreauto-flexcan1.dtb \
diff --git a/arch/arm/boot/dts/imx6dl-ofwi.dts b/arch/arm/boot/dts/imx6dl-ofwi.dts
new file mode 100644
index 0000000..6afc7a7
--- /dev/null
+++ b/arch/arm/boot/dts/imx6dl-ofwi.dts
@@ -0,0 +1,119 @@
+/*
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx6dl.dtsi"
+#include "imx6qdl-icore.dtsi"
+
+/ {
+	model = "Engicam i.CoreM6 DualLite/Solo wi openframe";
+	compatible = "fsl,imx6-icore", "fsl,imx6dl";
+};
+
+&ldb {
+	ipu_id = <0>;
+	sec_ipu_id = <0>;
+};
+
+&mxcfb1 {
+	status = "okay";
+};
+
+&mxcfb2 {
+	status = "okay";
+};
+
+/* To be enabled for PCI peripheral.
+   Please enable also the PCI support kernel options:
+   CONFIG_PCI and PCI_IMX6
+&pcie {
+	status = "okay";
+};
+*/
+
+&i2c2 {
+
+	hdmi: edid@50 {
+		compatible = "fsl,imx6-hdmi-i2c";
+		reg = <0x50>;
+	};
+
+};
+
+
+&i2c3 {
+
+	codec: sgtl5000@0a {
+		compatible = "fsl,sgtl5000";
+		reg = <0x0a>;
+		clocks = <&clks 201>;
+		VDDA-supply = <&reg_2p5v>;
+		VDDIO-supply = <&reg_3p3v>;
+		VDDD-supply = <&reg_1p8v>;
+	};
+
+	polytouch: st1232_ts@55 {
+		compatible = "sitronix,st1232-ts";
+		reg = <0x55>;
+		pinctrl-names = "default";		
+		pinctrl-0 = <&pinctrl_st1232_ts>;
+		interrupt-parent = <&gpio5>;
+		interrupts = <30 0>;	
+		reset-gpios = <&gpio6 0 1>;
+	};
+
+	adv7180: adv7180@21 {
+		compatible = "adv,adv7180";
+		reg = <0x21>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_ipu1_6>;
+		clocks = <&clks 201>;
+		clock-names = "csi_mclk";
+		DOVDD-supply = <&reg_3p3v>; /* 3.3v, enabled via 2.8 VGEN6 */
+		AVDD-supply = <&reg_3p3v>;  /* 1.8v */
+		DVDD-supply = <&reg_3p3v>;  /* 1.8v */
+		PVDD-supply = <&reg_3p3v>;  /* 1.8v */
+		pwn-gpios = <&gpio3 19 0>;  /* put on not used pin */
+		csi_id = <0>;
+		mclk = <24000000>;
+		mclk_source = <0>;
+		cvbs = <1>;
+	};
+	
+	pcf8563: rtc@51 {
+		compatible = "pcf8563";
+		reg = <0x51>;
+	};
+};
+
+&iomuxc {
+
+	pinctrl-assert-gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
+	
+	hog {
+		pinctrl_hog: hoggrp {
+			fsl,pins = <
+				MX6QDL_PAD_GPIO_2__GPIO1_IO02 0x1f059
+				MX6QDL_PAD_EIM_D19__GPIO3_IO19 0x1f059 /* not used pin for ADV7180 driver compatibility */
+			>;
+		};
+	};
+};
+
+&iomuxc {
+	touchpanel{
+		pinctrl_st1232_ts:  st1232-tsgrp  {
+			fsl,pins = <
+				MX6QDL_PAD_CSI0_DAT12__GPIO5_IO30 0x1b0b0 /*interrupt*/ 
+				MX6QDL_PAD_CSI0_DAT14__GPIO6_IO00 0x1b0b0 /*reset edt*/
+			>;
+		};
+	};
+};
+
diff --git a/arch/arm/boot/dts/imx6q-ofwi.dts b/arch/arm/boot/dts/imx6q-ofwi.dts
new file mode 100644
index 0000000..bedd9e7
--- /dev/null
+++ b/arch/arm/boot/dts/imx6q-ofwi.dts
@@ -0,0 +1,121 @@
+/*
+ * Copyright (C) 2013 Freescale Semiconductor, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include "imx6q.dtsi"
+#include "imx6qdl-icore.dtsi"
+
+/ {
+	model = "Engicam i.CoreM6 Quad/Dual wi openframe";
+	compatible = "fsl,imx6-icore", "fsl,imx6q";
+};
+
+&ldb {
+	ipu_id = <0>;
+	sec_ipu_id = <0>;
+};
+
+&mxcfb1 {
+	status = "okay";
+};
+
+&mxcfb2 {
+	status = "okay";
+};
+
+&sata {
+	status = "okay";
+};
+
+/* To be enabled for PCI peripheral.
+   Please enable also the PCI support kernel options:
+   CONFIG_PCI and PCI_IMX6
+&pcie {
+	status = "okay";
+};
+*/
+
+&i2c2 {
+
+	hdmi: edid@50 {
+		compatible = "fsl,imx6-hdmi-i2c";
+		reg = <0x50>;
+	};
+};
+
+ &i2c3 {
+
+	codec: sgtl5000@0a {
+		compatible = "fsl,sgtl5000";
+		reg = <0x0a>;
+		clocks = <&clks 201>;
+		VDDA-supply = <&reg_2p5v>;
+		VDDIO-supply = <&reg_3p3v>;
+		VDDD-supply = <&reg_1p8v>;
+	};
+
+	polytouch: st1232_ts@55 {
+		compatible = "sitronix,st1232-ts";
+		reg = <0x55>;
+		pinctrl-names = "default";		
+		pinctrl-0 = <&pinctrl_st1232_ts>;
+		interrupt-parent = <&gpio5>;
+		interrupts = <30 0>;	
+		reset-gpios = <&gpio6 0 1>;
+	};
+
+	adv7180: adv7180@21 {
+		compatible = "adv,adv7180";
+		reg = <0x21>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_ipu1_6>;
+		clocks = <&clks 201>;
+		clock-names = "csi_mclk";
+		DOVDD-supply = <&reg_3p3v>; /* 3.3v, enabled via 2.8 VGEN6 */
+		AVDD-supply = <&reg_3p3v>;  /* 1.8v */
+		DVDD-supply = <&reg_3p3v>;  /* 1.8v */
+		PVDD-supply = <&reg_3p3v>;  /* 1.8v */
+		pwn-gpios = <&gpio3 19 0>;  /* put on not used pin */
+		csi_id = <0>;
+		mclk = <24000000>;
+		mclk_source = <0>;
+		cvbs = <1>;
+	};
+	
+	pcf8563: rtc@51 {
+		compatible = "pcf8563";
+		reg = <0x51>;
+	};
+
+};
+
+&iomuxc {
+
+	pinctrl-assert-gpios = <&gpio1 2 GPIO_ACTIVE_HIGH>;
+	
+	hog {
+		pinctrl_hog: hoggrp {
+			fsl,pins = <
+				MX6QDL_PAD_GPIO_2__GPIO1_IO02 0x1f059
+				MX6QDL_PAD_EIM_D19__GPIO3_IO19 0x1f059 /* not used pin for ADV7180 driver compatibility */
+			>;
+		};
+	};
+};
+
+&iomuxc {
+	touchpanel{
+		pinctrl_st1232_ts:  st1232-tsgrp  {
+			fsl,pins = <
+				MX6QDL_PAD_CSI0_DAT12__GPIO5_IO30 0x1b0b0 /*interrupt*/ 
+				MX6QDL_PAD_CSI0_DAT14__GPIO6_IO00 0x1b0b0 /*reset edt*/
+			>;
+		};
+	};
+};
diff --git a/drivers/input/touchscreen/st1232.c b/drivers/input/touchscreen/st1232.c
index 5c342b3..92855f2 100644
--- a/drivers/input/touchscreen/st1232.c
+++ b/drivers/input/touchscreen/st1232.c
@@ -22,6 +22,7 @@
 #include <linux/gpio.h>
 #include <linux/i2c.h>
 #include <linux/input.h>
+#include <linux/input/mt.h>
 #include <linux/interrupt.h>
 #include <linux/module.h>
 #include <linux/of.h>
@@ -40,6 +41,8 @@
 #define MAX_AREA	0xff
 #define MAX_FINGERS	2
 
+#define INVERT_Y
+
 struct st1232_ts_finger {
 	u16 x;
 	u16 y;
@@ -51,10 +54,43 @@ struct st1232_ts_data {
 	struct i2c_client *client;
 	struct input_dev *input_dev;
 	struct st1232_ts_finger finger[MAX_FINGERS];
+	u16 max_x;
+	u16 max_y;	
 	struct dev_pm_qos_request low_latency_req;
 	int reset_gpio;
 };
 
+static int st1232_ts_read_resolution(struct st1232_ts_data *ts)
+{
+
+	struct i2c_client *client = ts->client;
+	struct i2c_msg msg[2];
+	int error;
+	u8 start_reg;
+	u8 buf[10];
+
+	/* read touchscreen data from ST1232 */
+	msg[0].addr = client->addr;
+	msg[0].flags = 0;
+	msg[0].len = 1;
+	msg[0].buf = &start_reg;
+	start_reg = 0x0;
+
+	msg[1].addr = ts->client->addr;
+	msg[1].flags = I2C_M_RD;
+	msg[1].len = sizeof(buf);
+	msg[1].buf = buf;
+
+	error = i2c_transfer(client->adapter, msg, 2);
+	if (error < 0)
+		return error;
+
+	ts->max_x = ((buf[4] & 0x0070) << 4) | buf[5];
+	ts->max_y = ((buf[4] & 0x0007) << 8) | buf[6];
+
+	return 0;
+}
+
 static int st1232_ts_read_data(struct st1232_ts_data *ts)
 {
 	struct st1232_ts_finger *finger = ts->finger;
@@ -88,12 +124,18 @@ static int st1232_ts_read_data(struct st1232_ts_data *ts)
 	if (finger[0].is_valid) {
 		finger[0].x = ((buf[2] & 0x0070) << 4) | buf[3];
 		finger[0].y = ((buf[2] & 0x0007) << 8) | buf[4];
+#ifdef INVERT_Y
+		finger[0].y = ts->max_y - finger[0].y;
+#endif
 		finger[0].t = buf[8];
 	}
 
 	if (finger[1].is_valid) {
 		finger[1].x = ((buf[5] & 0x0070) << 4) | buf[6];
 		finger[1].y = ((buf[5] & 0x0007) << 8) | buf[7];
+#ifdef INVERT_Y
+		finger[1].y = ts->max_y - finger[1].y;
+#endif
 		finger[1].t = buf[9];
 	}
 
@@ -114,24 +156,29 @@ static irqreturn_t st1232_ts_irq_handler(int irq, void *dev_id)
 
 	/* multi touch protocol */
 	for (i = 0; i < MAX_FINGERS; i++) {
+	        input_mt_slot(input_dev, i);
+                input_mt_report_slot_state(input_dev, MT_TOOL_FINGER, finger[i].is_valid);
+
 		if (!finger[i].is_valid)
 			continue;
 
 		input_report_abs(input_dev, ABS_MT_TOUCH_MAJOR, finger[i].t);
 		input_report_abs(input_dev, ABS_MT_POSITION_X, finger[i].x);
 		input_report_abs(input_dev, ABS_MT_POSITION_Y, finger[i].y);
-		input_mt_sync(input_dev);
+		//input_mt_sync(input_dev);
 		count++;
 	}
 
+	input_mt_report_pointer_emulation(input_dev, true);
+
 	/* SYN_MT_REPORT only if no contact */
-	if (!count) {
-		input_mt_sync(input_dev);
+	//if (!count) {
+		//input_mt_sync(input_dev);
 		if (ts->low_latency_req.dev) {
 			dev_pm_qos_remove_request(&ts->low_latency_req);
 			ts->low_latency_req.dev = NULL;
 		}
-	} else if (!ts->low_latency_req.dev) {
+		else if (!ts->low_latency_req.dev) {
 		/* First contact, request 100 us latency. */
 		dev_pm_qos_add_ancestor_request(&ts->client->dev,
 						&ts->low_latency_req, 100);
@@ -205,10 +252,29 @@ static int st1232_ts_probe(struct i2c_client *client,
 	__set_bit(EV_SYN, input_dev->evbit);
 	__set_bit(EV_KEY, input_dev->evbit);
 	__set_bit(EV_ABS, input_dev->evbit);
+        __set_bit(BTN_TOUCH, input_dev->keybit);
+
+	error = st1232_ts_read_resolution(ts);
+	if (error < 0)	{
+		dev_err(&client->dev, "I2C error\n");
+		return(error);
+	}
 
-	input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, MAX_AREA, 0, 0);
-	input_set_abs_params(input_dev, ABS_MT_POSITION_X, MIN_X, MAX_X, 0, 0);
-	input_set_abs_params(input_dev, ABS_MT_POSITION_Y, MIN_Y, MAX_Y, 0, 0);
+	printk("st1232-ts probed: resolution %dx%d\n", ts->max_x, ts->max_y);
+        /* Single touch */
+        input_set_abs_params(input_dev, ABS_X, 0, MAX_X, 0, 0);
+        input_set_abs_params(input_dev, ABS_Y, 0, MAX_Y, 0, 0);
+
+        /* Multi touch */
+	input_mt_init_slots(input_dev, MAX_FINGERS,0);
+ 	input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, MAX_AREA, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_POSITION_X, MIN_X, ts->max_x, 0, 0);
+	input_set_abs_params(input_dev, ABS_MT_POSITION_Y, MIN_Y, ts->max_y, 0, 0);
+
+	//input_set_abs_params(input_dev, ABS_MT_TOUCH_MAJOR, 0, MAX_AREA, 0, 0);
+	//input_set_abs_params(input_dev, ABS_MT_POSITION_X, MIN_X, MAX_X, 0, 0);
+	//input_set_abs_params(input_dev, ABS_MT_POSITION_Y, MIN_Y, MAX_Y, 0, 0);	
+	input_set_drvdata(input_dev, ts);
 
 	error = devm_request_threaded_irq(&client->dev, client->irq,
 					  NULL, st1232_ts_irq_handler,
-- 
1.7.9.5

