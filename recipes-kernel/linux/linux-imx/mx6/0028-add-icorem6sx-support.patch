From 4f70dbc257a3254b71c944dcf48731d89e33d766 Mon Sep 17 00:00:00 2001
From: "matteo.lisi" <matteo.lisi@engicam.com>
Date: Mon, 26 Oct 2015 11:44:27 +0100
Subject: [PATCH] add icorem6sx support

---
 arch/arm/boot/dts/Makefile               |   3 +
 arch/arm/boot/dts/Makefile.rej           |  12 -
 arch/arm/boot/dts/imx6sx-icore-icu.dts   | 555 +++++++++++++++++++++
 arch/arm/boot/dts/imx6sx-icore-pads.dtsi | 801 ++++++++++++++++++++++++++++++
 arch/arm/boot/dts/imx6sx-icore.dts       | 541 ++++++++++++++++++++
 arch/arm/boot/dts/imx6sx-smarcore.dts    | 579 ++++++++++++++++++++++
 arch/arm/boot/dts/imx6sx.dtsi            |  64 ++-
 arch/arm/mach-imx/clk-imx6sx.c           |  15 +-
 arch/arm/mach-imx/mach-imx6sx.c          |   2 +
 drivers/input/misc/ad714x.c              | 136 +++++-
 drivers/input/touchscreen/edt-ft5x06.c   |   8 +
 drivers/pci/host/pci-imx6.c              |   8 +-
 drivers/pinctrl/devicetree.c             |   3 +
 drivers/usb/serial/GobiSerial.c          | 812 +++++++++++++++++++++++++++++++
 drivers/usb/serial/Kconfig               |   6 +
 drivers/video/mxc/mxc_lcdif.c            |  64 +++
 16 files changed, 3566 insertions(+), 43 deletions(-)
 delete mode 100644 arch/arm/boot/dts/Makefile.rej
 create mode 100644 arch/arm/boot/dts/imx6sx-icore-icu.dts
 create mode 100644 arch/arm/boot/dts/imx6sx-icore-pads.dtsi
 create mode 100644 arch/arm/boot/dts/imx6sx-icore.dts
 create mode 100644 arch/arm/boot/dts/imx6sx-smarcore.dts
 create mode 100644 drivers/usb/serial/GobiSerial.c

diff --git a/arch/arm/boot/dts/Makefile b/arch/arm/boot/dts/Makefile
index 15767d5..0d0143d 100644
--- a/arch/arm/boot/dts/Makefile
+++ b/arch/arm/boot/dts/Makefile
@@ -217,6 +217,9 @@ dtb-$(CONFIG_ARCH_MXC) += \
 	imx6sx-19x19-arm2-csi.dtb \
 	imx6sx-19x19-arm2-lcdif1.dtb \
 	imx6sx-19x19-arm2-gpmi-weim.dtb \
+	imx6sx-icore.dtb \
+	imx6sx-icore-icu.dtb \
+	imx6sx-smarcore.dtb \
 	imx6sx-sdb.dtb \
 	imx6sx-sdb-ldo.dtb \
 	imx6sx-sdb-mqs.dtb \
diff --git a/arch/arm/boot/dts/Makefile.rej b/arch/arm/boot/dts/Makefile.rej
deleted file mode 100644
index 0fd66b3..0000000
--- a/arch/arm/boot/dts/Makefile.rej
+++ /dev/null
@@ -1,12 +0,0 @@
---- arch/arm/boot/dts/Makefile
-+++ arch/arm/boot/dts/Makefile
-@@ -120,7 +120,9 @@
- 	imx6dl-ofres.dtb \
- 	imx6q-ofres.dtb \
- 	imx6dl-ofcap.dtb \
-+	imx6dl-ofwi.dtb \
- 	imx6q-ofcap.dtb \
-+	imx6q-ofwi.dtb \
- 	imx6dl-sabreauto.dtb \
- 	imx6dl-sabreauto-ecspi.dtb \
- 	imx6dl-sabreauto-flexcan1.dtb \
diff --git a/arch/arm/boot/dts/imx6sx-icore-icu.dts b/arch/arm/boot/dts/imx6sx-icore-icu.dts
new file mode 100644
index 0000000..5de8afc
--- /dev/null
+++ b/arch/arm/boot/dts/imx6sx-icore-icu.dts
@@ -0,0 +1,555 @@
+/*
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include <dt-bindings/gpio/gpio.h>
+#include "imx6sx.dtsi"
+#include "imx6sx-icore-pads.dtsi"
+
+/ {
+	model = "Engicam i.Core M6 SoloX";
+	compatible = "fsl,imx6sx-icore", "fsl,imx6sx";
+
+	backlight1 {
+		compatible = "pwm-backlight";
+		pwms = <&pwm5 0 50000>;
+		brightness-levels = <0 4 8 16 32 64 128 255>;
+		default-brightness-level = <0>;
+		fb-names = "mxs-lcdif0";
+	};
+#ifdef BUZZER
+	buzzer {
+		compatible = "pwm-beeper";
+		pwms = <&pwm2 0 1000000>;
+	};
+#else
+	/* Buzzer pilotato come backlight */
+	buzzer {
+		compatible = "pwm-backlight";
+		pwms = <&pwm2 0 1000000>;
+		brightness-levels = <0 128 255>;
+		default-brightness-level = <0>;
+//		fb-names = "mxs-lcdif0";
+	};
+#endif
+	memory {
+		reg = <0x80000000 0x40000000>;
+	};
+
+	pxp_v4l2_out {
+		compatible = "fsl,imx6sx-pxp-v4l2", "fsl,imx6sl-pxp-v4l2";
+		status = "okay";
+	};
+#ifdef ICORE_TEST
+	// Fa comparire /dev/video16 e /dev/video17.. sembra non funzionare 
+	v4l2_out {
+		compatible = "fsl,mxc_v4l2_output";
+		status = "okay";
+	};
+#endif
+	regulators {
+		compatible = "simple-bus";
+
+		reg_3V3: 3V3{
+			compatible = "regulator-fixed";
+			regulator-name = "+3V3";
+			regulator-min-microvolt = <3000000>;
+			regulator-max-microvolt = <3000000>;
+			regulator-always-on;
+		};
+
+		reg_vref_3v3: regulator@0 {
+			compatible = "regulator-fixed";
+			regulator-name = "vref-3v3";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+		};
+
+		reg_psu_5v: psu_5v0 {
+			compatible = "regulator-fixed";
+			regulator-name = "PSU-5V0";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-boot-on;
+		};
+
+		reg_usb_otg1_vbus: usb_otg1_vbus {
+			compatible = "regulator-fixed";
+			regulator-name = "usb_otg1_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio1 9 0>;
+			enable-active-high;
+		};
+
+		reg_usb_otg2_vbus: usb_otg2_vbus {
+			compatible = "regulator-fixed";
+			regulator-name = "usb_otg2_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio1 12 0>;
+			enable-active-high;
+		};
+
+	};
+
+	sound {
+		compatible = "fsl,imx6-icore-sgtl5000",
+			     "fsl,imx-audio-sgtl5000";
+		model = "imx6q-icore-sgtl5000";
+		cpu-dai = <&ssi1>;
+		audio-codec = <&codec>;
+		audio-routing =
+			"LINE_IN", "Line In Jack",
+			"Headphone Jack", "HP_OUT";
+		mux-int-port = <1>;
+		mux-ext-port = <6>;
+	};
+
+	csi1_v4l2_cap {
+		compatible = "fsl,imx6sx-csi-v4l2", "fsl,imx6sl-csi-v4l2";
+		status = "okay";
+	};
+};
+
+&csi1 {
+	status = "okay";
+};
+
+&csi2 {
+	status = "okay";
+};
+
+&adc1 {
+	vref-supply = <&reg_vref_3v3>;
+	status = "okay";
+};
+
+&adc2 {
+	vref-supply = <&reg_vref_3v3>;
+	status = "okay";
+};
+
+&audmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_audmux_4>;
+	status = "okay";
+};
+
+&fec1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet1_2 &pinctrl_enet1_clkout_2>;
+	pinctrl-assert-gpios = <&gpio6 19 GPIO_ACTIVE_HIGH>;
+	phy-mode = "mii";
+	fsl,num_tx_queues=<3>;
+	fsl,num_rx_queues=<3>;
+	status = "okay";
+};
+
+&fec2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet2_2>;
+	pinctrl-assert-gpios = <&gpio6 20 GPIO_ACTIVE_HIGH>;
+	phy-mode = "mii";
+	fsl,num_tx_queues=<3>;
+	fsl,num_rx_queues=<3>;
+	status = "okay";
+};
+
+&gpc {
+	fsl,cpu_pupscr_sw2iso = <0xf>;
+	fsl,cpu_pupscr_sw = <0xf>;
+	fsl,cpu_pdnscr_iso2sw = <0x1>;
+	fsl,cpu_pdnscr_iso = <0x1>;
+	fsl,wdog-reset = <1>; /* watchdog select of reset source */
+};
+
+&i2c1 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c1_1>;
+        status = "okay";
+
+	codec: sgtl5000@0a {
+		compatible = "fsl,sgtl5000";
+		reg = <0x0a>;
+		clocks = <&clks IMX6SX_CLK_SSI1>;
+		VDDA-supply = <&reg_3V3>;
+		VDDIO-supply = <&reg_3V3>;
+	};
+
+	
+/*
+	polytouch: edt-ft5x06@38 {
+		compatible = "edt,edt-ft5406";
+		reg = <0x38>;
+		pinctrl-names = "default";		
+		pinctrl-0 = <&pinctrl_edt_ft5x06>;
+		interrupt-parent = <&gpio1>;
+		interrupts = <14 0>;	
+		reset-gpios = <&gpio1 0 16>;
+	};
+*/
+
+
+
+	keytouch: ad7147_captouch@2C {
+		compatible = "ad,ad7147_captouch";
+		reg = <0x2C>;
+		button_num = <4>;
+		touchpad_num = <0>;
+		wheel_num = <0>;
+		slider_num = <0>;
+		/* ATTENZIONE: da completare porting del driver por associazione tasti, per ora murati nel kernel */
+		interrupt-parent = <&gpio1>;
+		interrupts = <16 2>;	
+	};
+
+	eeprom: eeprom@56 {
+		compatible = "at,24c64";
+		reg = <0x56>;
+	};
+
+	rtc: ds3231@68 {
+		 compatible = "maxim,ds3231";
+		reg = <0x68>;
+	};
+};
+
+#ifdef TOLTO_ICU
+&iomuxc {
+	keytouch{
+		pinctrl_edt_ft5x06:  edt-ft5x06grp  {
+			fsl,pins = <
+				MX6SX_PAD_CSI_DATA00__GPIO1_IO_14 0x17059 /*interrupt*/ 
+				MX6SX_PAD_CSI_DATA02__GPIO1_IO_16 0x17059 /*reset*/
+			>;
+		};
+	};
+};
+#endif
+&flexcan1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan1_2>;
+//	trx-en-gpio = <&gpio4 25 GPIO_ACTIVE_HIGH>;
+//	trx-stby-gpio = <&gpio4 27 GPIO_ACTIVE_HIGH>;
+	status = "okay";
+};
+
+&flexcan2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan2_2>;
+//	trx-en-gpio = <&gpio4 25 GPIO_ACTIVE_HIGH>;
+//	trx-stby-gpio = <&gpio4 27 GPIO_ACTIVE_HIGH>;
+	status = "okay";
+};
+
+&i2c2 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c2_2>;
+        status = "okay";
+
+	hdmi: edid@50 {
+		compatible = "fsl,imx6-hdmi-i2c";
+		reg = <0x50>;
+	};
+};
+
+
+&i2c3 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c3_2>;
+        status = "okay";
+
+	max11801@48 {
+		compatible = "maxim,max11801";
+		reg = <0x48>;
+		interrupt-parent = <&gpio6>;
+		interrupts = <18 2>;
+		work-mode = <0>;/*DCM mode*/
+	};
+
+};
+
+#ifdef TOLTO_ICORE
+&i2c4 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c4_1>;
+        status = "okay";
+
+};
+#endif
+
+&iomuxc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog>;
+
+	hog {
+		pinctrl_hog: hoggrp {
+			fsl,pins = <
+				MX6SX_PAD_CSI_DATA00__GPIO1_IO_14 	0x17059 /* CSI_D2 */
+				MX6SX_PAD_CSI_DATA01__GPIO1_IO_15 	0x17059 /* CSI_D3 */
+				MX6SX_PAD_CSI_DATA02__GPIO1_IO_16 	0x17059 /* CSI_D4 */
+				MX6SX_PAD_CSI_DATA03__GPIO1_IO_17 	0x17059 /* PCI_WAKE */
+				MX6SX_PAD_CSI_DATA04__GPIO1_IO_18 	0x17059 /* PCI_RST */
+				MX6SX_PAD_CSI_DATA05__GPIO1_IO_19 	0x17059 /* PCI_W_DISABLE */
+				MX6SX_PAD_CSI_DATA06__GPIO1_IO_20 	0x17059 /* TOUCH_INT */
+				MX6SX_PAD_CSI_DATA07__GPIO1_IO_21 	0x17059 /* MISC_GPIO01 */
+				MX6SX_PAD_CSI_VSYNC__GPIO1_IO_25	0x17059 /* SPARE_GPIOA */
+				MX6SX_PAD_CSI_HSYNC__GPIO1_IO_22	0x17059 /* SPARE_GPIOB */
+				MX6SX_PAD_CSI_PIXCLK__GPIO1_IO_24	0x17059 /* MISC_GPIO02 */
+				MX6SX_PAD_CSI_MCLK__GPIO1_IO_23 	0x17059 /* LED Ve */
+				MX6SX_PAD_KEY_ROW3__GPIO2_IO_18		0x17059 /* SPARE_GPIOC */
+				MX6SX_PAD_GPIO1_IO12__GPIO1_IO_12	0x17059 /* MISC_GPIO03 */
+				MX6SX_PAD_SD3_CLK__GPIO7_IO_0		0x17059 /* MISC_GPIO04 */
+				MX6SX_PAD_GPIO1_IO13__GPIO1_IO_13	0x17059 /* MISC_GPIO05 */
+				MX6SX_PAD_KEY_COL2__GPIO2_IO_12		0x17059 /* WiFI reset */
+				MX6SX_PAD_QSPI1B_DATA1__GPIO4_IO_25	0x17059 /* GPS_1PPS_FIX */
+
+/* TBD */
+				MX6SX_PAD_KEY_COL0__GPIO2_IO_10		0x17059 /* GPIO_SP0 */
+				MX6SX_PAD_KEY_COL1__GPIO2_IO_11		0x17059 /* GPIO_SP1 */
+				MX6SX_PAD_KEY_ROW0__GPIO2_IO_15		0x17059 /* GPIO_SP2 */
+				MX6SX_PAD_KEY_ROW1__GPIO2_IO_16		0x17059 /* GPIO_SP3 */
+				MX6SX_PAD_KEY_COL3__GPIO2_IO_13		0x17059 /* GPIO_SP5 */
+				MX6SX_PAD_KEY_ROW2__GPIO2_IO_17		0x17059 /* GPIO_SP6 */
+				MX6SX_PAD_GPIO1_IO08__GPIO1_IO_8	0x17059 /* GPIO_SP8 */
+				MX6SX_PAD_GPIO1_IO09__GPIO1_IO_9	0x17059 /* GPIO_SP9 */
+				MX6SX_PAD_SD3_CMD__GPIO7_IO_1		0x17059 /* GPIO_SP11 */
+				MX6SX_PAD_QSPI1B_SS1_B__GPIO4_IO_31	0x17059 /* GPIO_SP12 */
+				MX6SX_PAD_QSPI1B_DQS__GPIO4_IO_28	0x17059 /* GPIO_SP13 */
+				MX6SX_PAD_QSPI1B_DATA2__GPIO4_IO_26	0x17059 /* GPIO_SP14 */
+				MX6SX_PAD_QSPI1B_DATA3__GPIO4_IO_27	0x17059 /* GPIO_SP15 */
+				MX6SX_PAD_GPIO1_IO02__GPIO1_IO_2	0x17059 /* SD1_CD */
+				MX6SX_PAD_SD4_DATA4__GPIO6_IO_18	0x17059 /* PEN_IRQ */
+				MX6SX_PAD_SD4_DATA5__GPIO6_IO_19 	0x17059	/* ETH_PHY1_RES */
+				MX6SX_PAD_SD4_DATA6__GPIO6_IO_20 	0x17059	/* ETH_PHY2_RES */
+
+			>;
+		};
+	};
+};
+
+&pcie {
+//	power-on-gpio = <&gpio1 17 0>;
+	reset-gpio = <&gpio1 18 0>;
+	status = "okay";
+};
+
+&sai1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_sai1_2>;
+	status = "disabled";
+};
+
+&ssi1 {
+	status = "okay";
+};
+
+&uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1_1>;
+	status = "okay";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart2_1>;
+	status = "okay";
+};
+
+&uart3 { 
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart3_2>;
+	status = "okay";
+};
+
+&gpmi {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_gpmi_nand_1>;
+	status = "okay"; 
+};
+
+&usbotg1 {
+	vbus-supply = <&reg_usb_otg1_vbus>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg1_1>;
+	imx6-usb-charger-detection;
+	status = "okay";
+};
+
+&usbotg2 {
+	vbus-supply = <&reg_usb_otg2_vbus>;
+	dr_mode = "host";
+	status = "okay";
+};
+
+&usdhc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc1_1>;
+	cd-gpios = <&gpio1 2 0>;
+	non-removable;
+	no-1-8-v;
+	vmmc-supply = <&reg_3V3>;
+	status = "okay";
+};
+
+&usdhc2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc2_1>;
+	non-removable;
+	no-1-8-v;
+	keep-power-in-suspend;
+	vmmc-supply = <&reg_3V3>;
+	enable-sdio-wakeup;
+	status = "okay";
+};
+
+#ifdef TOLTO_ICORE
+&usdhc3 {
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc3_1>;
+	pinctrl-1 = <&pinctrl_usdhc3_1_100mhz>;
+	pinctrl-2 = <&pinctrl_usdhc3_1_200mhz>;
+	bus-width = <8>;
+	cd-gpios = <&gpio2 10 0>;
+	wp-gpios = <&gpio2 15 0>;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+	vmmc-supply = <&reg_3V3>;
+	status = "okay";
+};
+
+&usdhc4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc4_2 &pinctrl_usdhc4_gpios>;
+	cd-gpios = <&gpio6 21 0>;
+	wp-gpios = <&gpio6 20 0>;
+	status = "okay";
+};
+#endif
+
+&lcdif1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_lcdif_dat_1
+		     &pinctrl_lcdif_ctrl_0>;
+	lcd-supply = <&reg_3V3>;
+	display = <&display0>;
+	status = "disabled";
+
+	display0: display {
+		bits-per-pixel = <16>;
+		bus-width = <18>;
+
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: timing0 {
+				clock-frequency = <33500000>;
+				hactive = <800>;
+				vactive = <480>;
+				hback-porch = <89>;
+				hfront-porch = <164>;
+				vback-porch = <23>;
+				vfront-porch = <10>;
+				hsync-len = <10>;
+				vsync-len = <10>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active = <1>;
+				pixelclk-active = <0>;
+			};
+		};
+	};
+};
+
+&lcdif2 {
+	display = <&display1>;
+	disp-dev = "ldb";
+	status = "okay";
+
+	display1: display {
+		bits-per-pixel = <16>;
+		bus-width = <18>;
+	};
+};
+
+&ldb {
+	status = "okay";
+
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <18>;
+		crtc = "lcdif2";
+		status = "okay";
+
+		display-timings {
+			native-mode = <&timing1>;
+			timing1: hsd100pxn1 {
+				clock-frequency = <65000000>;
+				hactive = <1280>;
+				vactive = <480>;
+				hback-porch = <353>;
+				hfront-porch = <47>;
+				vback-porch = <39>;
+				vfront-porch = <7>;
+				hsync-len = <60>;
+				vsync-len = <10>;
+			};
+		};
+	};
+};
+
+
+&pwm2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm2_0>;
+	status = "okay";
+};
+
+&pwm5 {	/* LCD CONTRAST */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm5_0>;
+	status = "okay";
+};
+
+&pxp {
+	status = "okay";
+};
+
+#ifdef TOLTO_ICORE
+&qspi2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_qspi2_1>;
+	status = "okay";
+
+	flash0: s25fl128s@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "spansion,s25fl128s";
+		spi-max-frequency = <66000000>;
+		reg = <0>;
+	};
+
+	flash1: s25fl128s@1 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "spansion,s25fl128s";
+		spi-max-frequency = <66000000>;
+		reg = <1>;
+	};
+};
+#endif
+&vadc {
+	vadc_in = <0>;
+	csi_id = <1>;
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/imx6sx-icore-pads.dtsi b/arch/arm/boot/dts/imx6sx-icore-pads.dtsi
new file mode 100644
index 0000000..68c95c4
--- /dev/null
+++ b/arch/arm/boot/dts/imx6sx-icore-pads.dtsi
@@ -0,0 +1,801 @@
+
+
+
+/ {
+soc {
+		gpmi-nand {
+			pinctrl_gpmi_nand_1: gpmi-nand-1 {
+				fsl,pins = <
+					MX6SX_PAD_NAND_CLE__RAWNAND_CLE         0xb0b1
+					MX6SX_PAD_NAND_ALE__RAWNAND_ALE         0xb0b1
+					MX6SX_PAD_NAND_WP_B__RAWNAND_WP_B       0xb0b1
+					MX6SX_PAD_NAND_READY_B__RAWNAND_READY_B 0xb000
+					MX6SX_PAD_NAND_CE0_B__RAWNAND_CE0_B     0xb0b1
+					MX6SX_PAD_NAND_CE1_B__RAWNAND_CE1_B     0xb0b1
+					MX6SX_PAD_NAND_RE_B__RAWNAND_RE_B       0xb0b1
+					MX6SX_PAD_NAND_WE_B__RAWNAND_WE_B       0xb0b1
+					MX6SX_PAD_NAND_DATA00__RAWNAND_DATA00   0xb0b1
+					MX6SX_PAD_NAND_DATA01__RAWNAND_DATA01   0xb0b1
+					MX6SX_PAD_NAND_DATA02__RAWNAND_DATA02   0xb0b1
+					MX6SX_PAD_NAND_DATA03__RAWNAND_DATA03   0xb0b1
+					MX6SX_PAD_NAND_DATA04__RAWNAND_DATA04   0xb0b1
+					MX6SX_PAD_NAND_DATA05__RAWNAND_DATA05   0xb0b1
+					MX6SX_PAD_NAND_DATA06__RAWNAND_DATA06   0xb0b1
+					MX6SX_PAD_NAND_DATA07__RAWNAND_DATA07   0xb0b1
+				>;
+			};
+		};
+
+
+	uart1 {
+		pinctrl_uart1_1: uart1grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO04__UART1_TX 0x1b0b1
+				MX6SX_PAD_GPIO1_IO05__UART1_RX 0x1b0b1
+			>;
+		};
+
+		pinctrl_uart1_2: uart1grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_ENET2_COL__UART1_RX 0x1b0b1
+				MX6SX_PAD_ENET2_CRS__UART1_TX 0x1b0b1
+			>;
+		};
+	};
+
+	uart2 {
+		pinctrl_uart2_1: uart2grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO07__UART2_RX 0x1b0b1
+				MX6SX_PAD_GPIO1_IO06__UART2_TX 0x1b0b1
+			>;
+		};
+
+		pinctrl_uart2_2: uart2grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_SD1_DATA0__UART2_RX 0x1b0b1
+				MX6SX_PAD_SD1_DATA1__UART2_TX 0x1b0b1
+			>;
+		};
+	};
+
+	uart3 {
+		pinctrl_uart3_1: uart3grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_QSPI1B_DATA0__UART3_CTS_B    	0x1b0b1
+				MX6SX_PAD_QSPI1B_DATA1__UART3_RTS_B    	0x1b0b1
+				MX6SX_PAD_QSPI1B_SS0_B__UART3_TX 	0x1b0b1
+				MX6SX_PAD_QSPI1B_SCLK__UART3_RX 	0x1b0b1
+			>;
+		};
+		pinctrl_uart3_2: uart3grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_QSPI1B_SS0_B__UART3_TX 	0x1b0b1
+				MX6SX_PAD_QSPI1B_SCLK__UART3_RX 	0x1b0b1
+			>;
+		};
+	};
+
+	uart5 {
+		pinctrl_uart5_1: uart5grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_KEY_ROW3__UART5_RX    0x1b0b1
+				MX6SX_PAD_KEY_COL3__UART5_TX    0x1b0b1
+				MX6SX_PAD_KEY_ROW2__UART5_CTS_B 0x1b0b1
+				MX6SX_PAD_KEY_COL2__UART5_RTS_B 0x1b0b1
+			>;
+		};
+
+		pinctrl_uart5dte_1: uart5dtegrp-1 {
+			fsl,pins = <
+				MX6SX_PAD_KEY_ROW3__UART5_TX	0x1b0b1
+				MX6SX_PAD_KEY_COL3__UART5_RX    0x1b0b1
+				MX6SX_PAD_KEY_ROW2__UART5_RTS_B	0x1b0b1
+				MX6SX_PAD_KEY_COL2__UART5_CTS_B	0x1b0b1
+			>;
+		};
+		pinctrl_uart5_2: uart5grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_KEY_ROW3__UART5_RX    0x1b0b1
+				MX6SX_PAD_KEY_COL3__UART5_TX    0x1b0b1
+			>;
+		};
+	};
+
+	uart6 {
+		pinctrl_uart6_1: uart6grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_KEY_COL1__UART6_TX 	0x1b0b1
+				MX6SX_PAD_KEY_ROW1__UART6_RX 	0x1b0b1
+			>;
+		};
+	};
+
+
+	flexcan1 {
+		pinctrl_flexcan1_1: flexcan1grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_QSPI1B_DQS__CAN1_TX	0x1b020
+				MX6SX_PAD_QSPI1A_SS1_B__CAN1_RX	0x1b020
+			>;
+		};
+
+		pinctrl_flexcan1_2: flexcan1grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_SD3_DATA5__CAN1_TX	0x1b0b0
+				MX6SX_PAD_SD3_DATA7__CAN1_RX	0x1b0b0
+			>;
+		};
+		pinctrl_flexcan1_3: flexcan1grp-3 {
+			fsl,pins = <
+				MX6SX_PAD_KEY_COL2__CAN1_TX	0x1b0b0
+				MX6SX_PAD_KEY_ROW2__CAN1_RX	0x1b0b0
+			>;
+		};
+	};
+
+	flexcan2 {
+		pinctrl_flexcan2_1: flexcan2grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_QSPI1B_SS1_B__CAN2_RX 0x1b020
+				MX6SX_PAD_QSPI1A_DQS__CAN2_TX	0x1b020
+			>;
+		};
+
+		pinctrl_flexcan2_2: flexcan2grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_SD3_DATA4__CAN2_RX 	0x1b0b0
+				MX6SX_PAD_SD3_DATA6__CAN2_TX	0x1b0b0
+			>;
+		};
+
+	};
+
+
+	usdhc1 {
+		pinctrl_usdhc1_1: usdhc1grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_SD1_CMD__USDHC1_CMD     0x17059
+				MX6SX_PAD_SD1_CLK__USDHC1_CLK     0x10059
+				MX6SX_PAD_SD1_DATA0__USDHC1_DATA0 0x17059
+				MX6SX_PAD_SD1_DATA1__USDHC1_DATA1 0x17059
+				MX6SX_PAD_SD1_DATA2__USDHC1_DATA2 0x17059
+				MX6SX_PAD_SD1_DATA3__USDHC1_DATA3 0x17059
+			>;
+		};
+	};
+
+	usdhc2 {
+		pinctrl_usdhc2_1: usdhc2grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_SD2_CMD__USDHC2_CMD     0x17059
+				MX6SX_PAD_SD2_CLK__USDHC2_CLK     0x10059
+				MX6SX_PAD_SD2_DATA0__USDHC2_DATA0 0x17059
+				MX6SX_PAD_SD2_DATA1__USDHC2_DATA1 0x17059
+				MX6SX_PAD_SD2_DATA2__USDHC2_DATA2 0x17059
+				MX6SX_PAD_SD2_DATA3__USDHC2_DATA3 0x17059
+			>;
+		};
+		pinctrl_usdhc2_2: usdhc2grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_SD2_CMD__USDHC2_CMD     0x17029
+				MX6SX_PAD_SD2_CLK__USDHC2_CLK     0x10029
+				MX6SX_PAD_SD2_DATA0__USDHC2_DATA0 0x17029
+				MX6SX_PAD_SD2_DATA1__USDHC2_DATA1 0x17029
+				MX6SX_PAD_SD2_DATA2__USDHC2_DATA2 0x17029
+				MX6SX_PAD_SD2_DATA3__USDHC2_DATA3 0x17029
+			>;
+		};
+	};
+
+
+	i2c1 {
+		pinctrl_i2c1_1: i2c1grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO01__I2C1_SDA          0x4001b8b1
+				MX6SX_PAD_GPIO1_IO00__I2C1_SCL          0x4001b8b1
+			>;
+		};
+
+		pinctrl_i2c1_2: i2c1grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_CSI_DATA01__I2C1_SDA          0x4001b8b1
+				MX6SX_PAD_CSI_DATA00__I2C1_SCL          0x4001b8b1
+			>;
+		};
+	};
+
+	i2c2 {
+		pinctrl_i2c2_1: i2c2grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO03__I2C2_SDA          0x4001b8b1
+				MX6SX_PAD_GPIO1_IO02__I2C2_SCL          0x4001b8b1
+			>;
+		};
+
+		pinctrl_i2c2_2: i2c2grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_SD4_DATA2__I2C2_SDA          0x4001b8b1
+				MX6SX_PAD_SD4_DATA3__I2C2_SCL          0x4001b8b1
+			>;
+		};
+
+		pinctrl_i2c2_3: i2c2grp-3 {
+			fsl,pins = <
+				MX6SX_PAD_QSPI1B_DATA2__I2C2_SDA          0x4001b8b1
+				MX6SX_PAD_QSPI1B_DATA3__I2C2_SCL          0x4001b8b1
+			>;
+		};
+	};
+
+	i2c3 {
+		pinctrl_i2c3_1: i2c3grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_ENET2_TX_CLK__I2C3_SDA        0x4001b8b1
+				MX6SX_PAD_KEY_COL4__I2C3_SCL            0x4001b8b1
+			>;
+		};
+
+		pinctrl_i2c3_2: i2c3grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_KEY_ROW4__I2C3_SDA            0x4001b8b1
+				MX6SX_PAD_KEY_COL4__I2C3_SCL            0x4001b8b1
+			>;
+		};
+	};
+
+	i2c4 {
+		pinctrl_i2c4_1: i2c4grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_CSI_DATA07__I2C4_SDA          0x4001b8b1
+				MX6SX_PAD_CSI_DATA06__I2C4_SCL          0x4001b8b1
+			>;
+		};
+		pinctrl_i2c4_2: i2c4grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_SD3_DATA1__I2C4_SDA           0x4001b8b1
+				MX6SX_PAD_SD3_DATA0__I2C4_SCL           0x4001b8b1
+			>;
+		};
+		pinctrl_i2c4_3: i2c4grp-3 {
+			fsl,pins = <
+				MX6SX_PAD_USB_H_DATA__I2C4_SDA           0x4001b8b1
+				MX6SX_PAD_USB_H_STROBE__I2C4_SCL           0x4001b8b1
+			>;
+		};
+	};
+
+	lcdif1 {
+		pinctrl_lcdif_dat_0: lcdifdatgrp-0 {
+			fsl,pins = <
+				MX6SX_PAD_LCD1_DATA00__LCDIF1_DATA_0 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA01__LCDIF1_DATA_1 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA02__LCDIF1_DATA_2 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA03__LCDIF1_DATA_3 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA04__LCDIF1_DATA_4 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA05__LCDIF1_DATA_5 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA06__LCDIF1_DATA_6 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA07__LCDIF1_DATA_7 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA08__LCDIF1_DATA_8 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA09__LCDIF1_DATA_9 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA10__LCDIF1_DATA_10 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA11__LCDIF1_DATA_11 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA12__LCDIF1_DATA_12 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA13__LCDIF1_DATA_13 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA14__LCDIF1_DATA_14 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA15__LCDIF1_DATA_15 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA16__LCDIF1_DATA_16 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA17__LCDIF1_DATA_17 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA18__LCDIF1_DATA_18 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA19__LCDIF1_DATA_19 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA20__LCDIF1_DATA_20 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA21__LCDIF1_DATA_21 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA22__LCDIF1_DATA_22 0x4001b0b0
+				MX6SX_PAD_LCD1_DATA23__LCDIF1_DATA_23 0x4001b0b0
+			>;
+		};
+
+		pinctrl_lcdif_dat_1: lcdifdatgrp-1 {
+			fsl,pins = <
+				MX6SX_PAD_LCD1_DATA00__LCDIF1_DATA_0 0x1b0b0
+				MX6SX_PAD_LCD1_DATA01__LCDIF1_DATA_1 0x1b0b0
+				MX6SX_PAD_LCD1_DATA02__LCDIF1_DATA_2 0x1b0b0
+				MX6SX_PAD_LCD1_DATA03__LCDIF1_DATA_3 0x1b0b0
+				MX6SX_PAD_LCD1_DATA04__LCDIF1_DATA_4 0x1b0b0
+				MX6SX_PAD_LCD1_DATA05__LCDIF1_DATA_5 0x1b0b0
+				MX6SX_PAD_LCD1_DATA06__LCDIF1_DATA_6 0x1b0b0
+				MX6SX_PAD_LCD1_DATA07__LCDIF1_DATA_7 0x1b0b0
+				MX6SX_PAD_LCD1_DATA08__LCDIF1_DATA_8 0x1b0b0
+				MX6SX_PAD_LCD1_DATA09__LCDIF1_DATA_9 0x1b0b0
+				MX6SX_PAD_LCD1_DATA10__LCDIF1_DATA_10 0x1b0b0
+				MX6SX_PAD_LCD1_DATA11__LCDIF1_DATA_11 0x1b0b0
+				MX6SX_PAD_LCD1_DATA12__LCDIF1_DATA_12 0x1b0b0
+				MX6SX_PAD_LCD1_DATA13__LCDIF1_DATA_13 0x1b0b0
+				MX6SX_PAD_LCD1_DATA14__LCDIF1_DATA_14 0x1b0b0
+				MX6SX_PAD_LCD1_DATA15__LCDIF1_DATA_15 0x1b0b0
+				MX6SX_PAD_LCD1_DATA16__LCDIF1_DATA_16 0x1b0b0
+				MX6SX_PAD_LCD1_DATA17__LCDIF1_DATA_17 0x1b0b0
+			>;
+		};
+
+		pinctrl_lcdif_ctrl_0: lcdifctrlgrp-0 {
+			fsl,pins = <
+				MX6SX_PAD_LCD1_CLK__LCDIF1_CLK	0x4001b0b0
+				MX6SX_PAD_LCD1_ENABLE__LCDIF1_ENABLE 0x4001b0b0
+				MX6SX_PAD_LCD1_VSYNC__LCDIF1_VSYNC 0x4001b0b0
+				MX6SX_PAD_LCD1_HSYNC__LCDIF1_HSYNC 0x4001b0b0
+				MX6SX_PAD_LCD1_RESET__GPIO3_IO_27 0x1b0b0
+			>;
+		};
+
+		pinctrl_lcdif_ctrl_1: lcdifctrlgrp-1 {
+			fsl,pins = <
+				MX6SX_PAD_LCD1_CLK__LCDIF1_CLK	0x1b0b0
+				MX6SX_PAD_LCD1_ENABLE__LCDIF1_ENABLE 0x1b0b0
+				MX6SX_PAD_LCD1_VSYNC__LCDIF1_VSYNC 0x1b0b0
+				MX6SX_PAD_LCD1_HSYNC__LCDIF1_HSYNC 0x1b0b0
+			>;
+		};
+
+	};
+
+
+	pwm2 {
+		pinctrl_pwm2_0: pwm2grp-0 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO11__PWM2_OUT 0x110b0
+			>;
+		};
+
+	};
+
+	pwm3 {
+		pinctrl_pwm3_0: pwm3grp-0 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO12__PWM3_OUT 0x110b0
+			>;
+		};
+
+		pinctrl_pwm3_1: pwm3grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_SD1_DATA2__PWM3_OUT 0x110b0
+			>;
+		};
+	};
+
+	pwm4 {
+		pinctrl_pwm4_0: pwm4grp-0 {
+			fsl,pins = <
+				MX6SX_PAD_SD1_DATA1__PWM4_OUT 0x110b0
+			>;
+		};
+
+		pinctrl_pwm4_1: pwm4grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO13__PWM4_OUT 0x110b0
+			>;
+		};
+	};
+
+	pwm5 {
+		pinctrl_pwm5_0: pwm5grp-0 {
+			fsl,pins = <
+				MX6SX_PAD_LCD1_DATA23__PWM5_OUT 0x17059
+			>;
+		};
+	};
+
+
+	usbotg1 {
+		pinctrl_usbotg1_1: usbotg1grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO10__ANATOP_OTG1_ID 0x17059
+			>;
+		};
+
+		pinctrl_usbotg1_2: usbotg1grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_ENET2_COL__ANATOP_OTG1_ID 0x17059
+			>;
+		};
+
+		pinctrl_usbotg1_3: usbotg1grp-3 {
+			fsl,pins = <
+				MX6SX_PAD_QSPI1A_DATA1__ANATOP_OTG1_ID 0x17059
+			>;
+		};
+	};
+
+	csi {
+		pinctrl_csi_0: csigrp-0 {
+			fsl,pins = <
+				MX6SX_PAD_LCD1_DATA07__CSI1_MCLK	0x110b0
+				MX6SX_PAD_LCD1_DATA06__CSI1_PIXCLK	0x110b0
+				MX6SX_PAD_LCD1_DATA04__CSI1_VSYNC	0x110b0
+				MX6SX_PAD_LCD1_DATA05__CSI1_HSYNC	0x110b0
+				MX6SX_PAD_LCD1_DATA17__CSI1_DATA_0	0x110b0
+				MX6SX_PAD_LCD1_DATA16__CSI1_DATA_1	0x110b0
+				MX6SX_PAD_LCD1_DATA15__CSI1_DATA_2	0x110b0
+				MX6SX_PAD_LCD1_DATA14__CSI1_DATA_3	0x110b0
+				MX6SX_PAD_LCD1_DATA13__CSI1_DATA_4	0x110b0
+				MX6SX_PAD_LCD1_DATA12__CSI1_DATA_5	0x110b0
+				MX6SX_PAD_LCD1_DATA11__CSI1_DATA_6	0x110b0
+				MX6SX_PAD_LCD1_DATA10__CSI1_DATA_7	0x110b0
+				MX6SX_PAD_LCD1_DATA09__CSI1_DATA_8	0x110b0
+				MX6SX_PAD_LCD1_DATA08__CSI1_DATA_9	0x110b0
+				MX6SX_PAD_LCD1_RESET__GPIO3_IO_27	0x80000000
+				MX6SX_PAD_LCD1_VSYNC__GPIO3_IO_28	0x80000000
+			>;
+		};
+
+		pinctrl_csi_1: csigrp-1 {
+			fsl,pins = <
+				MX6SX_PAD_CSI_MCLK__CSI1_MCLK		0x110b0
+				MX6SX_PAD_CSI_PIXCLK__CSI1_PIXCLK	0x110b0
+				MX6SX_PAD_CSI_VSYNC__CSI1_VSYNC		0x110b0
+				MX6SX_PAD_CSI_HSYNC__CSI1_HSYNC		0x110b0
+				MX6SX_PAD_CSI_DATA00__CSI1_DATA_2	0x110b0
+				MX6SX_PAD_CSI_DATA01__CSI1_DATA_3	0x110b0
+				MX6SX_PAD_CSI_DATA02__CSI1_DATA_4	0x110b0
+				MX6SX_PAD_CSI_DATA03__CSI1_DATA_5	0x110b0
+				MX6SX_PAD_CSI_DATA04__CSI1_DATA_6	0x110b0
+				MX6SX_PAD_CSI_DATA05__CSI1_DATA_7	0x110b0
+				MX6SX_PAD_CSI_DATA06__CSI1_DATA_8	0x110b0
+				MX6SX_PAD_CSI_DATA07__CSI1_DATA_9	0x110b0
+
+				MX6SX_PAD_LCD1_ENABLE__GPIO3_IO_25	0x80000000
+				MX6SX_PAD_LCD1_HSYNC__GPIO3_IO_26	0x80000000
+			>;
+		};
+
+		pinctrl_csi_2: csigrp-2 {
+			fsl,pins = <
+				MX6SX_PAD_CSI_MCLK__CSI1_MCLK		0x110b0
+				MX6SX_PAD_CSI_PIXCLK__CSI1_PIXCLK	0x110b0
+				MX6SX_PAD_CSI_VSYNC__CSI1_VSYNC		0x110b0
+				MX6SX_PAD_CSI_HSYNC__CSI1_HSYNC		0x110b0
+				MX6SX_PAD_CSI_DATA00__CSI1_DATA_2	0x110b0
+				MX6SX_PAD_CSI_DATA01__CSI1_DATA_3	0x110b0
+				MX6SX_PAD_CSI_DATA02__CSI1_DATA_4	0x110b0
+				MX6SX_PAD_CSI_DATA03__CSI1_DATA_5	0x110b0
+				MX6SX_PAD_CSI_DATA04__CSI1_DATA_6	0x110b0
+				MX6SX_PAD_CSI_DATA05__CSI1_DATA_7	0x110b0
+				MX6SX_PAD_CSI_DATA06__CSI1_DATA_8	0x110b0
+				MX6SX_PAD_CSI_DATA07__CSI1_DATA_9	0x110b0
+			>;
+		};
+	};
+
+#define ENET_PAD_CTRL 0x50
+#define ENET_RX_PAD_CTRL 0x30C1
+
+	enet1 {
+		pinctrl_enet1_1: enet1grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_ENET1_MDIO__ENET1_MDIO        0xa0b1
+				MX6SX_PAD_ENET1_MDC__ENET1_MDC          0xa0b1
+				MX6SX_PAD_RGMII1_TXC__ENET1_RGMII_TXC   0xa0b9
+				MX6SX_PAD_RGMII1_TD0__ENET1_TX_DATA_0   0xa0b1
+				MX6SX_PAD_RGMII1_TD1__ENET1_TX_DATA_1   0xa0b1
+				MX6SX_PAD_RGMII1_TD2__ENET1_TX_DATA_2   0xa0b1
+				MX6SX_PAD_RGMII1_TD3__ENET1_TX_DATA_3   0xa0b1
+				MX6SX_PAD_RGMII1_TX_CTL__ENET1_TX_EN    0xa0b1
+				MX6SX_PAD_RGMII1_RXC__ENET1_RX_CLK      0x3081
+				MX6SX_PAD_RGMII1_RD0__ENET1_RX_DATA_0   0x3081
+				MX6SX_PAD_RGMII1_RD1__ENET1_RX_DATA_1   0x3081
+				MX6SX_PAD_RGMII1_RD2__ENET1_RX_DATA_2   0x3081
+				MX6SX_PAD_RGMII1_RD3__ENET1_RX_DATA_3   0x3081
+				MX6SX_PAD_RGMII1_RX_CTL__ENET1_RX_EN    0x3081
+			>;
+		};
+
+		pinctrl_enet1_2: enet1grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_ENET1_MDIO__ENET1_MDIO        ENET_PAD_CTRL
+				MX6SX_PAD_ENET1_MDC__ENET1_MDC          ENET_PAD_CTRL
+				MX6SX_PAD_RGMII1_RX_CTL__ENET1_RX_EN    ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII1_RD0__ENET1_RX_DATA_0   ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII1_RD1__ENET1_RX_DATA_1   ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII1_RD2__ENET1_RX_DATA_2   ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII1_RD3__ENET1_RX_DATA_3   ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII1_RXC__ENET1_RX_ER      	ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII1_TX_CTL__ENET1_TX_EN    ENET_PAD_CTRL
+				MX6SX_PAD_RGMII1_TD0__ENET1_TX_DATA_0   ENET_PAD_CTRL
+				MX6SX_PAD_RGMII1_TD1__ENET1_TX_DATA_1   ENET_PAD_CTRL
+				MX6SX_PAD_RGMII1_TD2__ENET1_TX_DATA_2   ENET_PAD_CTRL
+				MX6SX_PAD_RGMII1_TD3__ENET1_TX_DATA_3   ENET_PAD_CTRL
+				MX6SX_PAD_RGMII1_TXC__ENET1_TX_ER  	ENET_PAD_CTRL
+				MX6SX_PAD_ENET1_COL__ENET1_COL		ENET_PAD_CTRL
+				MX6SX_PAD_ENET1_CRS__ENET1_CRS		ENET_PAD_CTRL
+				MX6SX_PAD_ENET1_TX_CLK__ENET1_TX_CLK 	ENET_PAD_CTRL
+				MX6SX_PAD_ENET1_RX_CLK__ENET1_RX_CLK 	ENET_PAD_CTRL
+			>;
+		};
+
+		pinctrl_enet1_3: enet1grp-3 {
+			fsl,pins = <
+				MX6SX_PAD_ENET1_COL__ENET2_MDC          ENET_PAD_CTRL
+				MX6SX_PAD_ENET1_CRS__ENET2_MDIO         ENET_PAD_CTRL
+				MX6SX_PAD_RGMII1_TXC__ENET1_RGMII_TXC  	0xa0b1
+				MX6SX_PAD_RGMII1_TD0__ENET1_TX_DATA_0   0xa0b1
+				MX6SX_PAD_RGMII1_TD1__ENET1_TX_DATA_1   0xa0b1
+				MX6SX_PAD_RGMII1_TD2__ENET1_TX_DATA_2   0xa0b1
+				MX6SX_PAD_RGMII1_TD3__ENET1_TX_DATA_3   0xa0b1
+				MX6SX_PAD_RGMII1_TX_CTL__ENET1_TX_EN    0xa0b1
+				MX6SX_PAD_RGMII1_RD0__ENET1_RX_DATA_0   0x3081
+				MX6SX_PAD_RGMII1_RD1__ENET1_RX_DATA_1   0x3081
+				MX6SX_PAD_RGMII1_RD2__ENET1_RX_DATA_2   0x3081
+				MX6SX_PAD_RGMII1_RD3__ENET1_RX_DATA_3   0x3081
+				MX6SX_PAD_RGMII1_RXC__ENET1_RX_CLK      0x3081
+				MX6SX_PAD_RGMII1_RX_CTL__ENET1_RX_EN    0x3081
+			>;
+		};
+
+
+		pinctrl_enet1_clkout_1: enet1_clkoutgrp-1 {
+			fsl,pins = <
+				MX6SX_PAD_ENET2_RX_CLK__ENET2_REF_CLK_25M	0x91
+			>;
+		};
+
+		pinctrl_enet1_clkout_2: enet1_clkoutgrp-2 {
+			fsl,pins = <
+				MX6SX_PAD_GPIO1_IO03__ENET1_REF_CLK_25M 	0x10
+			>;
+		};
+
+		pinctrl_enet1_clkout_3: enet1_clkoutgrp-3 {
+			fsl,pins = <
+				MX6SX_PAD_ENET1_MDC__ANATOP_24M_OUT 	0x10
+			>;
+		};
+	};
+
+
+	enet2 {
+		pinctrl_enet2_1: enet2grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_RGMII2_TXC__ENET2_RGMII_TXC   0xa0b9
+				MX6SX_PAD_RGMII2_TD0__ENET2_TX_DATA_0   0xa0b1
+				MX6SX_PAD_RGMII2_TD1__ENET2_TX_DATA_1   0xa0b1
+				MX6SX_PAD_RGMII2_TD2__ENET2_TX_DATA_2   0xa0b1
+				MX6SX_PAD_RGMII2_TD3__ENET2_TX_DATA_3   0xa0b1
+				MX6SX_PAD_RGMII2_TX_CTL__ENET2_TX_EN    0xa0b1
+				MX6SX_PAD_RGMII2_RXC__ENET2_RX_CLK      0x3081
+				MX6SX_PAD_RGMII2_RD0__ENET2_RX_DATA_0   0x3081
+				MX6SX_PAD_RGMII2_RD1__ENET2_RX_DATA_1   0x3081
+				MX6SX_PAD_RGMII2_RD2__ENET2_RX_DATA_2   0x3081
+				MX6SX_PAD_RGMII2_RD3__ENET2_RX_DATA_3   0x3081
+				MX6SX_PAD_RGMII2_RX_CTL__ENET2_RX_EN    0x3081
+			>;
+		};
+
+		pinctrl_enet2_2: enet2grp-2 {
+			fsl,pins = <
+				MX6SX_PAD_RGMII2_RX_CTL__ENET2_RX_EN  	ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII2_RD0__ENET2_RX_DATA_0  	ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII2_RD1__ENET2_RX_DATA_1  	ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII2_RD2__ENET2_RX_DATA_2  	ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII2_RD3__ENET2_RX_DATA_3  	ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII2_RXC__ENET2_RX_ER  	ENET_RX_PAD_CTRL
+				MX6SX_PAD_RGMII2_TX_CTL__ENET2_TX_EN  	ENET_PAD_CTRL
+				MX6SX_PAD_RGMII2_TD0__ENET2_TX_DATA_0  	ENET_PAD_CTRL
+				MX6SX_PAD_RGMII2_TD1__ENET2_TX_DATA_1  	ENET_PAD_CTRL
+				MX6SX_PAD_RGMII2_TD2__ENET2_TX_DATA_2  	ENET_PAD_CTRL
+				MX6SX_PAD_RGMII2_TD3__ENET2_TX_DATA_3  	ENET_PAD_CTRL
+				MX6SX_PAD_RGMII2_TXC__ENET2_TX_ER  	ENET_PAD_CTRL
+				MX6SX_PAD_ENET2_COL__ENET2_COL  	ENET_PAD_CTRL
+				MX6SX_PAD_ENET2_CRS__ENET2_CRS  	ENET_PAD_CTRL
+				MX6SX_PAD_ENET2_TX_CLK__ENET2_TX_CLK  	ENET_PAD_CTRL
+				MX6SX_PAD_ENET2_RX_CLK__ENET2_RX_CLK  	ENET_PAD_CTRL
+			>;
+		};
+
+
+		pinctrl_enet2_3: enet2grp-3 {
+			fsl,pins = <
+				MX6SX_PAD_RGMII2_TXC__ENET2_RGMII_TXC 	 0xa0b1
+				MX6SX_PAD_RGMII2_TD0__ENET2_TX_DATA_0  	 0xa0b1
+				MX6SX_PAD_RGMII2_TD1__ENET2_TX_DATA_1  	 0xa0b1
+				MX6SX_PAD_RGMII2_TD2__ENET2_TX_DATA_2  	 0xa0b1
+				MX6SX_PAD_RGMII2_TD3__ENET2_TX_DATA_3  	 0xa0b1
+				MX6SX_PAD_RGMII2_TX_CTL__ENET2_TX_EN  	 0xa0b1
+				MX6SX_PAD_RGMII2_RXC__ENET2_RX_CLK 	 0x3081
+				MX6SX_PAD_RGMII2_RD0__ENET2_RX_DATA_0    0x3081
+				MX6SX_PAD_RGMII2_RD1__ENET2_RX_DATA_1  	 0x3081
+				MX6SX_PAD_RGMII2_RD2__ENET2_RX_DATA_2  	 0x3081
+				MX6SX_PAD_RGMII2_RD3__ENET2_RX_DATA_3  	 0x3081
+				MX6SX_PAD_RGMII2_RX_CTL__ENET2_RX_EN 	 0x3081
+			>;
+		};
+
+	};
+
+	sai1 {
+		pinctrl_sai1_1: sai1grp_1 {
+			fsl,pins = <
+				MX6SX_PAD_CSI_DATA00__SAI1_TX_BCLK     0x1b030
+				MX6SX_PAD_CSI_DATA01__SAI1_TX_SYNC     0x1b030
+				MX6SX_PAD_CSI_DATA02__SAI1_RX_BCLK     0x1b030
+				MX6SX_PAD_CSI_DATA03__SAI1_RX_SYNC     0x1b030
+				MX6SX_PAD_CSI_HSYNC__SAI1_TX_DATA_0    0x1b030
+				MX6SX_PAD_CSI_VSYNC__SAI1_RX_DATA_0    0x1b030
+			>;
+		};
+
+		pinctrl_sai1_2: sai1grp_2 {
+			fsl,pins = <
+				MX6SX_PAD_CSI_DATA00__SAI1_TX_BCLK     0x130B0
+				MX6SX_PAD_CSI_DATA01__SAI1_TX_SYNC     0x130B0
+				MX6SX_PAD_CSI_HSYNC__SAI1_TX_DATA_0    0x120B0
+				MX6SX_PAD_CSI_VSYNC__SAI1_RX_DATA_0    0x130B0
+				MX6SX_PAD_CSI_PIXCLK__AUDMUX_MCLK      0x130B0
+			>;
+		};
+	};
+
+	sai2 {
+		pinctrl_sai2_1: sai2grp_1 {
+			fsl,pins = <
+				MX6SX_PAD_KEY_COL0__SAI2_TX_BCLK       0x1b030
+				MX6SX_PAD_KEY_COL1__SAI2_TX_SYNC       0x1b030
+				MX6SX_PAD_KEY_ROW0__SAI2_TX_DATA_0     0x1b030
+				MX6SX_PAD_KEY_ROW1__SAI2_RX_DATA_0     0x1b030
+			>;
+		};
+	};
+
+
+	ecspi2 {
+		pinctrl_ecspi2_1: ecspi2grp_1 {
+			fsl,pins = <
+				MX6SX_PAD_NAND_ALE__GPIO4_IO_0       0x70f1	/* SS0 as GPIO */
+				MX6SX_PAD_NAND_CLE__ECSPI2_SCLK      0x70f1
+				MX6SX_PAD_NAND_WP_B__ECSPI2_MOSI     0x70f1
+				MX6SX_PAD_NAND_READY_B__ECSPI2_MISO  0x70f1
+			>;
+		};
+
+	};
+
+
+
+	ecspi5 {
+		pinctrl_ecspi5_1: ecspi5grp_1 {
+			fsl,pins = <
+				MX6SX_PAD_NAND_DATA00__ECSPI5_MISO   0x70f1
+				MX6SX_PAD_NAND_DATA01__ECSPI5_MOSI   0x70f1
+				MX6SX_PAD_NAND_DATA02__ECSPI5_SCLK   0x70f1
+				MX6SX_PAD_NAND_DATA03__GPIO4_IO_7    0x70f1	/* SS0 as GPIO */
+			>;
+		};
+
+	};
+
+
+	usdhc3 {
+		pinctrl_usdhc3_1: usdhc3grp-1 {
+			fsl,pins = <
+				MX6SX_PAD_SD3_CMD__USDHC3_CMD	  0x17059
+				MX6SX_PAD_SD3_CLK__USDHC3_CLK	  0x10059
+				MX6SX_PAD_SD3_DATA0__USDHC3_DATA0 0x17059
+				MX6SX_PAD_SD3_DATA1__USDHC3_DATA1 0x17059
+				MX6SX_PAD_SD3_DATA2__USDHC3_DATA2 0x17059
+				MX6SX_PAD_SD3_DATA3__USDHC3_DATA3 0x17059
+				MX6SX_PAD_SD3_DATA4__USDHC3_DATA4 0x17059
+				MX6SX_PAD_SD3_DATA5__USDHC3_DATA5 0x17059
+				MX6SX_PAD_SD3_DATA6__USDHC3_DATA6 0x17059
+				MX6SX_PAD_SD3_DATA7__USDHC3_DATA7 0x17059
+			>;
+		};
+
+		pinctrl_usdhc3_1_100mhz: usdhc3grp-1-100mhz {
+			fsl,pins = <
+				MX6SX_PAD_SD3_CMD__USDHC3_CMD	  0x170b9
+				MX6SX_PAD_SD3_CLK__USDHC3_CLK	  0x100b9
+				MX6SX_PAD_SD3_DATA0__USDHC3_DATA0 0x170b9
+				MX6SX_PAD_SD3_DATA1__USDHC3_DATA1 0x170b9
+				MX6SX_PAD_SD3_DATA2__USDHC3_DATA2 0x170b9
+				MX6SX_PAD_SD3_DATA3__USDHC3_DATA3 0x170b9
+				MX6SX_PAD_SD3_DATA4__USDHC3_DATA4 0x170b9
+				MX6SX_PAD_SD3_DATA5__USDHC3_DATA5 0x170b9
+				MX6SX_PAD_SD3_DATA6__USDHC3_DATA6 0x170b9
+				MX6SX_PAD_SD3_DATA7__USDHC3_DATA7 0x170b9
+			>;
+		};
+
+		pinctrl_usdhc3_1_200mhz: usdhc3grp-1-200mhz {
+			fsl,pins = <
+				MX6SX_PAD_SD3_CMD__USDHC3_CMD	  0x170f9
+				MX6SX_PAD_SD3_CLK__USDHC3_CLK	  0x100f9
+				MX6SX_PAD_SD3_DATA0__USDHC3_DATA0 0x170f9
+				MX6SX_PAD_SD3_DATA1__USDHC3_DATA1 0x170f9
+				MX6SX_PAD_SD3_DATA2__USDHC3_DATA2 0x170f9
+				MX6SX_PAD_SD3_DATA3__USDHC3_DATA3 0x170f9
+				MX6SX_PAD_SD3_DATA4__USDHC3_DATA4 0x170f9
+				MX6SX_PAD_SD3_DATA5__USDHC3_DATA5 0x170f9
+				MX6SX_PAD_SD3_DATA6__USDHC3_DATA6 0x170f9
+				MX6SX_PAD_SD3_DATA7__USDHC3_DATA7 0x170f9
+			>;
+		};
+
+	};
+
+	usdhc4 {
+			pinctrl_usdhc4_1: usdhc4grp-1 {
+				fsl,pins = <
+					MX6SX_PAD_SD4_CMD__USDHC4_CMD     0x17059
+					MX6SX_PAD_SD4_CLK__USDHC4_CLK     0x10059
+					MX6SX_PAD_SD4_RESET_B__USDHC4_RESET_B 	0x17059
+					MX6SX_PAD_SD4_DATA0__USDHC4_DATA0 0x17059
+					MX6SX_PAD_SD4_DATA1__USDHC4_DATA1 0x17059
+					MX6SX_PAD_SD4_DATA2__USDHC4_DATA2 0x17059
+					MX6SX_PAD_SD4_DATA3__USDHC4_DATA3 0x17059
+					MX6SX_PAD_SD4_DATA4__USDHC4_DATA4 0x17059
+					MX6SX_PAD_SD4_DATA5__USDHC4_DATA5 0x17059
+					MX6SX_PAD_SD4_DATA6__USDHC4_DATA6 0x17059
+					MX6SX_PAD_SD4_DATA7__USDHC4_DATA7 0x17059
+				>;
+			};
+
+			pinctrl_usdhc4_1_100mhz: usdhc4grp-1-100mhz {
+				fsl,pins = <
+					MX6SX_PAD_SD4_CMD__USDHC4_CMD     0x170b9
+					MX6SX_PAD_SD4_CLK__USDHC4_CLK     0x100b9
+					MX6SX_PAD_SD4_RESET_B__USDHC4_RESET_B 	0x170b9
+					MX6SX_PAD_SD4_DATA0__USDHC4_DATA0 0x170b9
+					MX6SX_PAD_SD4_DATA1__USDHC4_DATA1 0x170b9
+					MX6SX_PAD_SD4_DATA2__USDHC4_DATA2 0x170b9
+					MX6SX_PAD_SD4_DATA3__USDHC4_DATA3 0x170b9
+					MX6SX_PAD_SD4_DATA4__USDHC4_DATA4 0x170b9
+					MX6SX_PAD_SD4_DATA5__USDHC4_DATA5 0x170b9
+					MX6SX_PAD_SD4_DATA6__USDHC4_DATA6 0x170b9
+					MX6SX_PAD_SD4_DATA7__USDHC4_DATA7 0x170b9
+				>;
+			};
+
+			pinctrl_usdhc4_1_200mhz: usdhc4grp-1-200mhz {
+				fsl,pins = <
+					MX6SX_PAD_SD4_CMD__USDHC4_CMD     0x170f9
+					MX6SX_PAD_SD4_CLK__USDHC4_CLK     0x100f9
+					MX6SX_PAD_SD4_RESET_B__USDHC4_RESET_B 	0x170f9
+					MX6SX_PAD_SD4_DATA0__USDHC4_DATA0 0x170f9
+					MX6SX_PAD_SD4_DATA1__USDHC4_DATA1 0x170f9
+					MX6SX_PAD_SD4_DATA2__USDHC4_DATA2 0x170f9
+					MX6SX_PAD_SD4_DATA3__USDHC4_DATA3 0x170f9
+					MX6SX_PAD_SD4_DATA4__USDHC4_DATA4 0x170f9
+					MX6SX_PAD_SD4_DATA5__USDHC4_DATA5 0x170f9
+					MX6SX_PAD_SD4_DATA6__USDHC4_DATA6 0x170f9
+					MX6SX_PAD_SD4_DATA7__USDHC4_DATA7 0x170f9
+				>;
+			};
+
+			pinctrl_usdhc4_2: usdhc4grp-2 {
+				fsl,pins = <
+					MX6SX_PAD_SD4_CMD__USDHC4_CMD     0x17059
+					MX6SX_PAD_SD4_CLK__USDHC4_CLK     0x10059
+					MX6SX_PAD_SD4_DATA0__USDHC4_DATA0 0x17059
+					MX6SX_PAD_SD4_DATA1__USDHC4_DATA1 0x17059
+					MX6SX_PAD_SD4_DATA2__USDHC4_DATA2 0x17059
+					MX6SX_PAD_SD4_DATA3__USDHC4_DATA3 0x17059
+				>;
+			};
+
+			pinctrl_usdhc4_3: usdhc4grp-3 {
+				fsl,pins = <
+					MX6SX_PAD_SD4_CMD__USDHC4_CMD     0x17071
+					MX6SX_PAD_SD4_CLK__USDHC4_CLK     0x10071
+					MX6SX_PAD_SD4_DATA0__USDHC4_DATA0 0x17071
+					MX6SX_PAD_SD4_DATA1__USDHC4_DATA1 0x17071
+					MX6SX_PAD_SD4_DATA2__USDHC4_DATA2 0x17071
+					MX6SX_PAD_SD4_DATA3__USDHC4_DATA3 0x17071
+					MX6SX_PAD_SD4_DATA4__USDHC4_DATA4 0x17071
+					MX6SX_PAD_SD4_DATA5__USDHC4_DATA5 0x17071
+					MX6SX_PAD_SD4_DATA6__USDHC4_DATA6 0x17071
+					MX6SX_PAD_SD4_DATA7__USDHC4_DATA7 0x17071
+				>;
+			};
+
+	};
+};
+};
diff --git a/arch/arm/boot/dts/imx6sx-icore.dts b/arch/arm/boot/dts/imx6sx-icore.dts
new file mode 100644
index 0000000..6223e5e
--- /dev/null
+++ b/arch/arm/boot/dts/imx6sx-icore.dts
@@ -0,0 +1,541 @@
+/*
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include <dt-bindings/gpio/gpio.h>
+#include "imx6sx.dtsi"
+#include "imx6sx-icore-pads.dtsi"
+
+/ {
+	model = "Engicam i.Core M6 SoloX";
+	compatible = "fsl,imx6sx-icore", "fsl,imx6sx";
+
+	backlight1 {
+		compatible = "pwm-backlight";
+		pwms = <&pwm5 0 50000>;
+		brightness-levels = <0 4 8 16 32 64 128 255>;
+		default-brightness-level = <7>;
+		fb-names = "mxs-lcdif0";
+	};
+
+	memory {
+		reg = <0x80000000 0x40000000>;
+	};
+
+	pxp_v4l2_out {
+		compatible = "fsl,imx6sx-pxp-v4l2", "fsl,imx6sl-pxp-v4l2";
+		status = "okay";
+	};
+#ifdef ICORE_TEST
+	// Fa comparire /dev/video16 e /dev/video17.. sembra non funzionare 
+	v4l2_out {
+		compatible = "fsl,mxc_v4l2_output";
+		status = "okay";
+	};
+#endif
+	regulators {
+		compatible = "simple-bus";
+
+		reg_3V3: 3V3{
+			compatible = "regulator-fixed";
+			regulator-name = "+3V3";
+			regulator-min-microvolt = <3000000>;
+			regulator-max-microvolt = <3000000>;
+			regulator-always-on;
+		};
+
+		reg_vref_3v3: regulator@0 {
+			compatible = "regulator-fixed";
+			regulator-name = "vref-3v3";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+		};
+
+		reg_psu_5v: psu_5v0 {
+			compatible = "regulator-fixed";
+			regulator-name = "PSU-5V0";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-boot-on;
+		};
+
+		reg_usb_otg1_vbus: usb_otg1_vbus {
+			compatible = "regulator-fixed";
+			regulator-name = "usb_otg1_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio1 9 0>;
+			enable-active-high;
+		};
+
+		reg_usb_otg2_vbus: usb_otg2_vbus {
+			compatible = "regulator-fixed";
+			regulator-name = "usb_otg2_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio1 12 0>;
+			enable-active-high;
+		};
+
+	};
+
+	sound {
+		compatible = "fsl,imx6-icore-sgtl5000",
+			     "fsl,imx-audio-sgtl5000";
+		model = "imx6q-icore-sgtl5000";
+		cpu-dai = <&ssi1>;
+		audio-codec = <&codec>;
+		audio-routing =
+			"LINE_IN", "Line In Jack",
+			"Headphone Jack", "HP_OUT";
+		mux-int-port = <1>;
+		mux-ext-port = <6>;
+	};
+
+	csi1_v4l2_cap {
+		compatible = "fsl,imx6sx-csi-v4l2", "fsl,imx6sl-csi-v4l2";
+		status = "okay";
+	};
+};
+
+&csi1 {
+	status = "okay";
+};
+
+&csi2 {
+	status = "okay";
+};
+
+&adc1 {
+	vref-supply = <&reg_vref_3v3>;
+	status = "okay";
+};
+
+&adc2 {
+	vref-supply = <&reg_vref_3v3>;
+	status = "okay";
+};
+
+&audmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_audmux_4>;
+	status = "okay";
+};
+
+&fec1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet1_2 &pinctrl_enet1_clkout_2>;
+	pinctrl-assert-gpios = <&gpio6 19 GPIO_ACTIVE_HIGH>;
+	phy-mode = "mii";
+	fsl,num_tx_queues=<3>;
+	fsl,num_rx_queues=<3>;
+	status = "okay";
+};
+
+&fec2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet2_2>;
+	pinctrl-assert-gpios = <&gpio6 20 GPIO_ACTIVE_HIGH>;
+	phy-mode = "mii";
+	fsl,num_tx_queues=<3>;
+	fsl,num_rx_queues=<3>;
+	status = "okay";
+};
+
+&gpc {
+	fsl,cpu_pupscr_sw2iso = <0xf>;
+	fsl,cpu_pupscr_sw = <0xf>;
+	fsl,cpu_pdnscr_iso2sw = <0x1>;
+	fsl,cpu_pdnscr_iso = <0x1>;
+	fsl,wdog-reset = <1>; /* watchdog select of reset source */
+};
+
+&i2c1 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c1_1>;
+        status = "okay";
+
+	codec: sgtl5000@0a {
+		compatible = "fsl,sgtl5000";
+		reg = <0x0a>;
+		clocks = <&clks IMX6SX_CLK_SSI1>;
+		VDDA-supply = <&reg_3V3>;
+		VDDIO-supply = <&reg_3V3>;
+	};
+	
+	polytouch: edt-ft5x06@38 {
+		compatible = "edt,edt-ft5406";
+		reg = <0x38>;
+		pinctrl-names = "default";		
+		pinctrl-0 = <&pinctrl_edt_ft5x06>;
+		interrupt-parent = <&gpio1>;
+		interrupts = <14 0>;	
+		reset-gpios = <&gpio1 0 16>;
+	};
+
+	adv7180: adv7180@21 {
+		compatible = "adv,adv7180";
+		reg = <0x21>;
+		pinctrl-names = "default";
+		pinctrl-0 = <&pinctrl_csi_2>;
+		clocks = <&clks IMX6SX_CLK_CSI>;
+		clock-names = "csi_mclk";
+		DOVDD-supply = <&reg_3V3>; /* 3.3v, enabled via 2.8 VGEN6 */
+		AVDD-supply = <&reg_3V3>;  /* 1.8v */
+		DVDD-supply = <&reg_3V3>;  /* 1.8v */
+		PVDD-supply = <&reg_3V3>;  /* 1.8v */
+//		pwn-gpios = <&gpio3 19 0>;  /* put on not used pin */
+		csi_id = <0>;
+		mclk = <24000000>;
+		mclk_source = <0>;
+		cvbs = <1>;
+		status = "disabled";
+
+	};
+#ifdef DA_SISTEMARE
+#endif
+};
+
+&iomuxc {
+	touchpanel{
+		pinctrl_edt_ft5x06:  edt-ft5x06grp  {
+			fsl,pins = <
+				MX6SX_PAD_CSI_DATA00__GPIO1_IO_14 0x17059 /*interrupt*/ 
+				MX6SX_PAD_CSI_DATA02__GPIO1_IO_16 0x17059 /*reset*/
+			>;
+		};
+	};
+};
+
+&flexcan1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan1_2>;
+//	trx-en-gpio = <&gpio4 25 GPIO_ACTIVE_HIGH>;
+//	trx-stby-gpio = <&gpio4 27 GPIO_ACTIVE_HIGH>;
+	status = "okay";
+};
+
+&flexcan2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan2_2>;
+//	trx-en-gpio = <&gpio4 25 GPIO_ACTIVE_HIGH>;
+//	trx-stby-gpio = <&gpio4 27 GPIO_ACTIVE_HIGH>;
+	status = "okay";
+};
+
+&i2c2 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c2_2>;
+        status = "okay";
+
+	hdmi: edid@50 {
+		compatible = "fsl,imx6-hdmi-i2c";
+		reg = <0x50>;
+	};
+};
+
+
+&i2c3 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c3_2>;
+        status = "okay";
+
+	max11801@48 {
+		compatible = "maxim,max11801";
+		reg = <0x48>;
+		interrupt-parent = <&gpio6>;
+		interrupts = <18 2>;
+		work-mode = <0>;/*DCM mode*/
+	};
+
+};
+
+#ifdef TOLTO_ICORE
+&i2c4 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c4_1>;
+        status = "okay";
+
+};
+#endif
+
+&iomuxc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog>;
+
+	hog {
+		pinctrl_hog: hoggrp {
+			fsl,pins = <
+				MX6SX_PAD_KEY_COL0__GPIO2_IO_10		0x17059 /* GPIO_SP0 */
+				MX6SX_PAD_KEY_COL1__GPIO2_IO_11		0x17059 /* GPIO_SP1 */
+				MX6SX_PAD_KEY_ROW0__GPIO2_IO_15		0x17059 /* GPIO_SP2 */
+				MX6SX_PAD_KEY_ROW1__GPIO2_IO_16		0x17059 /* GPIO_SP3 */
+				MX6SX_PAD_KEY_COL2__GPIO2_IO_12		0x17059 /* GPIO_SP4 */
+				MX6SX_PAD_KEY_COL3__GPIO2_IO_13		0x17059 /* GPIO_SP5 */
+				MX6SX_PAD_KEY_ROW2__GPIO2_IO_17		0x17059 /* GPIO_SP6 */
+				MX6SX_PAD_KEY_ROW3__GPIO2_IO_18		0x17059 /* GPIO_SP7 */
+				MX6SX_PAD_GPIO1_IO08__GPIO1_IO_8	0x17059 /* GPIO_SP8 */
+				MX6SX_PAD_GPIO1_IO09__GPIO1_IO_9	0x17059 /* GPIO_SP9 */
+				MX6SX_PAD_SD3_CLK__GPIO7_IO_0		0x17059 /* GPIO_SP10 */
+				MX6SX_PAD_SD3_CMD__GPIO7_IO_1		0x17059 /* GPIO_SP11 */
+				MX6SX_PAD_QSPI1B_SS1_B__GPIO4_IO_31	0x17059 /* GPIO_SP12 */
+				MX6SX_PAD_QSPI1B_DQS__GPIO4_IO_28	0x17059 /* GPIO_SP13 */
+				MX6SX_PAD_QSPI1B_DATA2__GPIO4_IO_26	0x17059 /* GPIO_SP14 */
+				MX6SX_PAD_QSPI1B_DATA3__GPIO4_IO_27	0x17059 /* GPIO_SP15 */
+#ifndef TEST_PWM
+				MX6SX_PAD_GPIO1_IO11__GPIO1_IO_11	0x17059 /* GPIO1_IO11/PWM2 */
+				MX6SX_PAD_GPIO1_IO12__GPIO1_IO_12	0x17059 /* GPIO1_IO12/PWM3 */
+				MX6SX_PAD_GPIO1_IO13__GPIO1_IO_13	0x17059 /* GPIO1_IO13/PWM4 */
+#endif
+				MX6SX_PAD_GPIO1_IO02__GPIO1_IO_2	0x17059 /* SD1_CD */
+				MX6SX_PAD_SD4_DATA4__GPIO6_IO_18	0x17059 /* PEN_IRQ */
+				MX6SX_PAD_SD4_DATA5__GPIO6_IO_19 	0x17059	/* ETH_PHY1_RES */
+				MX6SX_PAD_SD4_DATA6__GPIO6_IO_20 	0x17059	/* ETH_PHY2_RES */
+
+			>;
+		};
+	};
+};
+
+&pcie {
+	power-on-gpio = <&gpio2 0 0>;
+	reset-gpio = <&gpio2 1 0>;
+	status = "okay";
+};
+
+&sai1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_sai1_2>;
+	status = "disabled";
+};
+
+&ssi1 {
+	status = "okay";
+};
+
+&uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1_1>;
+	status = "okay";
+};
+
+&uart2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart2_1>;
+	status = "okay";
+};
+
+&uart3 { 
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart3_1>;
+	fsl,uart-has-rtscts;
+	status = "okay";
+};
+
+&gpmi {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_gpmi_nand_1>;
+	status = "okay"; 
+};
+
+&usbotg1 {
+	vbus-supply = <&reg_usb_otg1_vbus>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg1_1>;
+	imx6-usb-charger-detection;
+	status = "okay";
+};
+
+&usbotg2 {
+	vbus-supply = <&reg_usb_otg2_vbus>;
+	dr_mode = "host";
+	status = "okay";
+};
+
+&usdhc1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc1_1>;
+	cd-gpios = <&gpio1 2 0>;
+	non-removable;
+	no-1-8-v;
+	vmmc-supply = <&reg_3V3>;
+	status = "okay";
+};
+
+&usdhc2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc2_1>;
+	non-removable;
+	no-1-8-v;
+	keep-power-in-suspend;
+	vmmc-supply = <&reg_3V3>;
+	enable-sdio-wakeup;
+	status = "okay";
+};
+
+#ifdef TOLTO_ICORE
+&usdhc3 {
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc3_1>;
+	pinctrl-1 = <&pinctrl_usdhc3_1_100mhz>;
+	pinctrl-2 = <&pinctrl_usdhc3_1_200mhz>;
+	bus-width = <8>;
+	cd-gpios = <&gpio2 10 0>;
+	wp-gpios = <&gpio2 15 0>;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+	vmmc-supply = <&reg_3V3>;
+	status = "okay";
+};
+
+&usdhc4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc4_2 &pinctrl_usdhc4_gpios>;
+	cd-gpios = <&gpio6 21 0>;
+	wp-gpios = <&gpio6 20 0>;
+	status = "okay";
+};
+#endif
+
+&lcdif1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_lcdif_dat_1
+		     &pinctrl_lcdif_ctrl_0>;
+	lcd-supply = <&reg_3V3>;
+	display = <&display0>;
+	status = "okay";
+
+	display0: display {
+		bits-per-pixel = <16>;
+		bus-width = <18>;
+
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: timing0 {
+				clock-frequency = <33500000>;
+				hactive = <800>;
+				vactive = <480>;
+				hback-porch = <89>;
+				hfront-porch = <164>;
+				vback-porch = <23>;
+				vfront-porch = <10>;
+				hsync-len = <10>;
+				vsync-len = <10>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active = <1>;
+				pixelclk-active = <0>;
+			};
+		};
+	};
+};
+
+&lcdif2 {
+	display = <&display1>;
+	disp-dev = "ldb";
+	status = "okay";
+
+	display1: display {
+		bits-per-pixel = <16>;
+		bus-width = <18>;
+	};
+};
+
+&ldb {
+	status = "okay";
+
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <18>;
+		crtc = "lcdif2";
+		status = "okay";
+
+		display-timings {
+			native-mode = <&timing1>;
+			timing1: hsd100pxn1 {
+				clock-frequency = <65000000>;
+				hactive = <1024>;
+				vactive = <768>;
+				hback-porch = <220>;
+				hfront-porch = <40>;
+				vback-porch = <21>;
+				vfront-porch = <7>;
+				hsync-len = <60>;
+				vsync-len = <10>;
+			};
+		};
+	};
+};
+
+&pwm2 {
+	pinctrl-names = "default";
+#ifdef TEST_PWM
+	pinctrl-0 = <&pinctrl_pwm2_0>;
+	status = "okay";
+#endif
+};
+
+&pwm3 {
+	pinctrl-names = "default";
+#ifdef TEST_PWM
+	pinctrl-0 = <&pinctrl_pwm3_0>;
+	status = "okay";
+#endif
+};
+
+&pwm4 {
+	pinctrl-names = "default";
+#ifdef TEST_PWM
+f	pinctrl-0 = <&pinctrl_pwm4_1>;
+	status = "okay";
+#endif
+};
+
+&pwm5 {	/* LCD CONTRAST */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm5_0>;
+	status = "okay";
+};
+
+&pxp {
+	status = "okay";
+};
+
+#ifdef TOLTO_ICORE
+&qspi2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_qspi2_1>;
+	status = "okay";
+
+	flash0: s25fl128s@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "spansion,s25fl128s";
+		spi-max-frequency = <66000000>;
+		reg = <0>;
+	};
+
+	flash1: s25fl128s@1 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "spansion,s25fl128s";
+		spi-max-frequency = <66000000>;
+		reg = <1>;
+	};
+};
+#endif
+&vadc {
+	vadc_in = <0>;
+	csi_id = <1>;
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/imx6sx-smarcore.dts b/arch/arm/boot/dts/imx6sx-smarcore.dts
new file mode 100644
index 0000000..b737961
--- /dev/null
+++ b/arch/arm/boot/dts/imx6sx-smarcore.dts
@@ -0,0 +1,579 @@
+/*
+ * Copyright (C) 2014 Freescale Semiconductor, Inc.
+ *
+ * This program is free software; you can redistribute it and/or modify
+ * it under the terms of the GNU General Public License version 2 as
+ * published by the Free Software Foundation.
+ */
+
+/dts-v1/;
+
+#include <dt-bindings/gpio/gpio.h>
+#include "imx6sx.dtsi"
+#include "imx6sx-icore-pads.dtsi"
+
+/ {
+	model = "Engicam SmarCore M6SX";
+	compatible = "fsl,imx6sx-smarcore", "fsl,imx6sx";
+
+	backlight1 {
+		compatible = "pwm-backlight";
+		pwms = <&pwm2 0 100000>;
+		brightness-levels = <0 4 8 16 32 64 128 255>;
+		default-brightness-level = <255>;
+		fb-names = "mxs-lcdif0";
+	};
+
+
+	hannstar_cabc {
+		compatible = "hannstar,cabc";
+
+		lvds0 {
+			gpios = <&gpio4 26 GPIO_ACTIVE_HIGH>;
+		};
+	};
+
+	memory {
+		reg = <0x80000000 0x40000000>;
+	};
+
+	pxp_v4l2_out {
+		compatible = "fsl,imx6sx-pxp-v4l2", "fsl,imx6sl-pxp-v4l2";
+		status = "okay";
+	};
+
+	regulators {
+		compatible = "simple-bus";
+
+		reg_3V3: 3V3{
+			compatible = "regulator-fixed";
+			regulator-name = "+3V3";
+			regulator-min-microvolt = <3000000>;
+			regulator-max-microvolt = <3000000>;
+			regulator-always-on;
+		};
+
+		reg_lcd_3v3: lcd-3v3 {
+			compatible = "regulator-fixed";
+			regulator-name = "lcd-3v3";
+			gpio = <&gpio3 27 0>;
+			enable-active-high;
+			status = "disabled";
+		};
+
+		reg_sd3_vmmc: sd3_vmmc{
+			compatible = "regulator-fixed";
+			regulator-name = "VCC_SD3";
+			regulator-min-microvolt = <3000000>;
+			regulator-max-microvolt = <3000000>;
+			gpio = <&gpio2 11 GPIO_ACTIVE_HIGH>;
+			enable-active-high;
+		};
+
+		reg_vref_3v3: regulator@0 {
+			compatible = "regulator-fixed";
+			regulator-name = "vref-3v3";
+			regulator-min-microvolt = <3300000>;
+			regulator-max-microvolt = <3300000>;
+		};
+
+		reg_psu_5v: psu_5v0 {
+			compatible = "regulator-fixed";
+			regulator-name = "PSU-5V0";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			regulator-boot-on;
+		};
+
+		reg_usb_otg1_vbus: usb_otg1_vbus {
+			compatible = "regulator-fixed";
+			regulator-name = "usb_otg1_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio1 9 0>;
+			enable-active-high;
+		};
+
+		reg_usb_otg2_vbus: usb_otg2_vbus {
+			compatible = "regulator-fixed";
+			regulator-name = "usb_otg2_vbus";
+			regulator-min-microvolt = <5000000>;
+			regulator-max-microvolt = <5000000>;
+			gpio = <&gpio1 12 0>;
+			enable-active-high;
+		};
+
+	};
+
+	gpio-keys {
+		compatible = "gpio-keys";
+
+		volume-up {
+			label = "Volume Up";
+			gpios = <&gpio1 18 GPIO_ACTIVE_LOW>;
+			linux,code = <115>; /* KEY_VOLUMEUP */
+		};
+
+		volume-down {
+			label = "Volume Down";
+			gpios = <&gpio1 19 GPIO_ACTIVE_LOW>;
+			linux,code = <114>; /* KEY_VOLUMEDOWN */
+		};
+	};
+
+	sound {
+		compatible = "fsl,imx6-icore-sgtl5000",
+			     "fsl,imx-audio-sgtl5000";
+		model = "imx6q-icore-sgtl5000";
+		cpu-dai = <&ssi1>;
+		audio-codec = <&codec>;
+		audio-routing =
+		"MIC_IN", "Mic Jack",
+		"Mic Jack", "Mic Bias",
+		"Headphone Jack", "HP_OUT";
+		mux-int-port = <1>;
+		mux-ext-port = <5>;
+	};
+
+	csi1_v4l2_cap {
+		compatible = "fsl,imx6sx-csi-v4l2", "fsl,imx6sl-csi-v4l2";
+		status = "okay";
+	};
+};
+
+&csi1 {
+	status = "okay";
+};
+
+&adc1 {
+	vref-supply = <&reg_vref_3v3>;
+	status = "okay";
+};
+
+&adc2 {
+	vref-supply = <&reg_vref_3v3>;
+	status = "okay";
+};
+
+&audmux {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_audmux_5>;
+	status = "okay";
+};
+
+
+
+
+&fec1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet1_3 &pinctrl_enet1_clkout_3>;
+	phy-mode = "rgmii";
+	phy-id = <0x2>;
+#ifdef SMARC_RES_PHY
+	phy-reset-gpios = <&gpio2 7 GPIO_ACTIVE_HIGH>;
+	phy-reset-duration = <10>;
+#endif
+	fsl,num_tx_queues=<3>;
+	fsl,num_rx_queues=<3>;
+	status = "okay";
+};
+
+&fec2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_enet2_3>;
+	phy-mode = "rgmii";
+	phy-id = <0x3>;
+#ifdef SMARC_RES_PHY
+	phy-reset-gpios = <&gpio2 3 GPIO_ACTIVE_HIGH>;
+	phy-reset-duration = <10>;
+#endif
+	fsl,num_tx_queues=<3>;
+	fsl,num_rx_queues=<3>;
+	status = "okay";
+};
+
+
+
+&gpc {
+	fsl,cpu_pupscr_sw2iso = <0xf>;
+	fsl,cpu_pupscr_sw = <0xf>;
+	fsl,cpu_pdnscr_iso2sw = <0x1>;
+	fsl,cpu_pdnscr_iso = <0x1>;
+	fsl,wdog-reset = <1>; /* watchdog select of reset source */
+};
+
+&i2c1 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c1_1>;
+        status = "okay";
+
+	codec: sgtl5000@0a {
+		compatible = "fsl,sgtl5000";
+		reg = <0x0a>;
+		clocks = <&clks IMX6SX_CLK_OSC>;
+		VDDA-supply = <&reg_3V3>;
+		VDDIO-supply = <&reg_3V3>;
+	};
+
+};
+
+&flexcan1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan1_3>;
+// tolto SMARC		trx-en-gpio = <&gpio4 25 GPIO_ACTIVE_HIGH>;
+// tolto SMARC		trx-stby-gpio = <&gpio4 27 GPIO_ACTIVE_HIGH>;
+	status = "okay";
+};
+
+&flexcan2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_flexcan2_1>;
+// tolto SMARC		trx-en-gpio = <&gpio4 25 GPIO_ACTIVE_HIGH>;
+// tolto SMARC		trx-stby-gpio = <&gpio4 27 GPIO_ACTIVE_HIGH>;
+	status = "okay";
+};
+
+&i2c2 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c2_3>;
+        status = "okay";
+};
+
+
+&i2c3 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c3_2>;
+        status = "okay";
+
+	rfid: rfid@56 {
+		compatible = "at,24c02";
+		reg = <0x56>;
+	};
+
+	polytouch: edt-ft5x06@38 {
+		compatible = "edt,edt-ft5406";
+		reg = <0x38>;
+		pinctrl-names = "default";		
+		pinctrl-0 = <&pinctrl_edt_ft5x06>;
+		interrupt-parent = <&gpio4>;
+		interrupts = <9 0>;	
+		reset-gpios = <&gpio4 1 1>;
+	};
+
+};
+
+&i2c4 {
+        clock-frequency = <100000>;
+        pinctrl-names = "default";
+        pinctrl-0 = <&pinctrl_i2c4_3>;
+        status = "okay";
+
+};
+
+&iomuxc {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_hog>;
+
+	touchpanel{
+		pinctrl_edt_ft5x06:  edt-ft5x06grp  {
+			fsl,pins = <
+				MX6SX_PAD_NAND_DATA05__GPIO4_IO_9 0x17059 	/* interrupt GPIO2 */ 
+				MX6SX_PAD_NAND_CE0_B__GPIO4_IO_1 0x17059 	/* LCD_VDD_EN */
+			>;
+		};
+	};
+
+	usdhc2 {
+		pinctrl_usdhc2_gpios: usdhc2-gpios {
+			fsl,pins = <
+				MX6SX_PAD_SD1_CMD__GPIO6_IO_1     0x17059       //SD2_PWR_EN
+				MX6SX_PAD_LCD1_RESET__GPIO3_IO_27 0x17059       //SD2_CD
+				MX6SX_PAD_GPIO1_IO07__GPIO1_IO_7  0x17059       //SD2_WP 
+			>;
+		};
+#if 0
+	usdhc4 {
+		pinctrl_usdhc4_gpios: usdhc4-gpios {
+			fsl,pins = <
+				MX6SX_PAD_SD4_DATA7__GPIO6_IO_21 0x17059
+				MX6SX_PAD_SD4_DATA6__GPIO6_IO_20 0x17059
+			>;
+		};
+#endif
+	};
+
+	hog {
+		pinctrl_hog: hoggrp {
+			fsl,pins = <
+				MX6SX_PAD_ENET2_COL__GPIO2_IO_6 0x80000000
+				MX6SX_PAD_QSPI1A_DATA0__GPIO4_IO_16 0x80000000
+				MX6SX_PAD_QSPI1A_DATA3__GPIO4_IO_19 0x80000000
+				MX6SX_PAD_KEY_COL0__GPIO2_IO_10	0x17059
+				MX6SX_PAD_KEY_ROW0__GPIO2_IO_15	0x17059
+				MX6SX_PAD_GPIO1_IO03__GPIO1_IO_3 0x17059 /* PCIE Reset */
+				MX6SX_PAD_GPIO1_IO09__GPIO1_IO_9 0x17059 /* PCIE W_DISBLE */
+				MX6SX_PAD_QSPI1A_SS0_B__GPIO4_IO_22  0x17059 /* PCIE_WAKE# */
+// TOLTO SMARC				MX6SX_PAD_KEY_COL1__GPIO2_IO_11	0x17059
+// TOLTO SMARC				MX6SX_PAD_SD1_DATA0__GPIO6_IO_2 0x17059
+// TOLTO SMARC				MX6SX_PAD_QSPI1B_DATA1__GPIO4_IO_25 0x17059
+// TOLTO SMARC				MX6SX_PAD_QSPI1B_DATA2__GPIO4_IO_26 0x17059
+// TOLTO SMARC				MX6SX_PAD_QSPI1B_DATA3__GPIO4_IO_27 0x17059
+// TOLTO SMARC				MX6SX_PAD_CSI_DATA04__GPIO1_IO_18 0x17059
+// TOLTO SMARC				MX6SX_PAD_CSI_DATA05__GPIO1_IO_19 0x17059
+// TOLTO SMARC				MX6SX_PAD_SD1_DATA3__GPIO6_IO_5 0xb000
+			>;
+		};
+	};
+};
+
+&pcie {
+//	power-on-gpio = <&gpio2 0 0>;
+	reset-gpio = <&gpio1 3 0>;
+	pinctrl-assert-gpios = <&gpio1 9 GPIO_ACTIVE_HIGH>, <&gpio4 22 GPIO_ACTIVE_LOW>; 
+	status = "okay";
+};
+
+&sai1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_sai1_2>;
+	status = "disabled";
+};
+
+&ssi1 {
+	status = "okay";
+};
+
+&uart1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart1_1>;
+	status = "okay";
+};
+
+&uart3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart3_1>;
+	status = "okay";
+};
+
+&uart5 { /* console */
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart5_2>;
+	status = "okay";
+};
+
+&uart6 { 
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_uart6_1>;
+	status = "okay";
+};
+
+&usbotg1 {
+	vbus-supply = <&reg_usb_otg1_vbus>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usbotg1_1>;
+//	imx6-usb-charger-detection;
+	status = "okay";
+};
+
+&usbotg2 {
+	vbus-supply = <&reg_usb_otg2_vbus>;
+	dr_mode = "host";
+	status = "okay";
+};
+
+
+&usdhc2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_usdhc2_2 &pinctrl_usdhc2_gpios>;
+//	pinctrl-assert-gpios = <&gpio6 1 GPIO_ACTIVE_HIGH>; 
+	non-removable;
+	no-1-8-v;
+	vmmc-supply = <&reg_3V3>;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+//	cd-gpios = <&gpio3 27 0>;
+//	wp-gpios = <&gpio1 7 0>;
+	status = "okay";
+};
+
+&usdhc3 {
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc3_1>;
+	pinctrl-1 = <&pinctrl_usdhc3_1_100mhz>;
+	pinctrl-2 = <&pinctrl_usdhc3_1_200mhz>;
+	non-removable;
+	no-1-8-v;
+	vmmc-supply = <&reg_3V3>;
+	bus-width = <8>;
+	keep-power-in-suspend;
+	enable-sdio-wakeup;
+	status = "okay";
+};
+
+&usdhc4 {
+	pinctrl-names = "default", "state_100mhz", "state_200mhz";
+	pinctrl-0 = <&pinctrl_usdhc4_1>;
+	pinctrl-1 = <&pinctrl_usdhc4_1_100mhz>;
+	pinctrl-2 = <&pinctrl_usdhc4_1_200mhz>;
+	cd-gpios = <&gpio6 21 0>;
+	wp-gpios = <&gpio6 20 0>;
+	no-1-8-v;
+	vmmc-supply = <&reg_3V3>;
+	status = "okay";
+};
+
+&lcdif1 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_lcdif_dat_0
+		     &pinctrl_lcdif_ctrl_1>;
+	lcd-supply = <&reg_lcd_3v3>;
+	display = <&display0>;
+	status = "okay";
+
+	display0: display {
+		bits-per-pixel = <16>;
+		bus-width = <24>;
+
+		display-timings {
+			native-mode = <&timing0>;
+			timing0: timing0 {
+				clock-frequency = <33500000>;
+				hactive = <800>;
+				vactive = <480>;
+				hback-porch = <89>;
+				hfront-porch = <164>;
+				vback-porch = <23>;
+				vfront-porch = <10>;
+				hsync-len = <10>;
+				vsync-len = <10>;
+				hsync-active = <0>;
+				vsync-active = <0>;
+				de-active = <1>;
+				pixelclk-active = <0>;
+			};
+		};
+	};
+};
+
+&lcdif2 {
+	display = <&display1>;
+	disp-dev = "ldb";
+	status = "okay";
+
+	display1: display {
+		bits-per-pixel = <16>;
+		bus-width = <18>;
+	};
+};
+
+&ldb {
+	status = "okay";
+
+	lvds-channel@0 {
+		fsl,data-mapping = "spwg";
+		fsl,data-width = <18>;
+		crtc = "lcdif2";
+		status = "okay";
+
+		display-timings {
+			native-mode = <&timing1>;
+			timing1: hsd100pxn1 {
+				clock-frequency = <33000000>;
+				hactive = <800>;
+				vactive = <600>;
+				hback-porch = <64>;
+				hfront-porch = <20>;
+				vback-porch = <30>;
+				vfront-porch = <30>;
+				hsync-len = <5>;
+				vsync-len = <5>;
+			};
+		};
+	};
+};
+
+&pwm2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm2_0>;
+	status = "okay";
+};
+
+&pwm3 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm3_0>;
+	status = "okay";
+};
+
+&pwm4 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_pwm4_1>;
+	status = "okay";
+};
+
+&pxp {
+	status = "okay";
+};
+
+#ifdef TOLTO_SMARC
+&qspi2 {
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_qspi2_1>;
+	status = "okay";
+
+	flash0: s25fl128s@0 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "spansion,s25fl128s";
+		spi-max-frequency = <66000000>;
+		reg = <0>;
+	};
+
+	flash1: s25fl128s@1 {
+		#address-cells = <1>;
+		#size-cells = <1>;
+		compatible = "spansion,s25fl128s";
+		spi-max-frequency = <66000000>;
+		reg = <1>;
+	};
+};
+#endif
+
+&ecspi2 {
+	fsl,spi-num-chipselects = <1>;
+	cs-gpios = <&gpio4 0 0>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi2_1>;
+	status = "okay";
+	
+	/* Only for hardware debug to be removed */
+	flash1: m25p80@0 {
+		compatible = "sst,sst25vf016b";
+		spi-max-frequency = <20000000>;
+		reg = <0>;
+	};
+
+};
+
+&ecspi5 {
+	fsl,spi-num-chipselects = <1>;
+	cs-gpios = <&gpio4 7 0>;
+	pinctrl-names = "default";
+	pinctrl-0 = <&pinctrl_ecspi5_1>;
+	status = "okay";
+
+	/* Only for hardware debug to be removed */
+	flash2: m25p80@0 {
+		compatible = "sst,sst25vf016b";
+		spi-max-frequency = <20000000>;
+		reg = <0>;
+	};
+};
+
+&vadc {
+	vadc_in = <0>;
+	csi_id = <0>;
+	status = "okay";
+};
diff --git a/arch/arm/boot/dts/imx6sx.dtsi b/arch/arm/boot/dts/imx6sx.dtsi
index 7febe49..d5f02ad 100644
--- a/arch/arm/boot/dts/imx6sx.dtsi
+++ b/arch/arm/boot/dts/imx6sx.dtsi
@@ -130,6 +130,7 @@
 			clock-frequency = <0>;
 			clock-output-names = "ipp_di1";
 		};
+
 	};
 
 	soc {
@@ -270,6 +271,18 @@
 				reg = <0x02000000 0x40000>;
 				ranges;
 
+				ecspi5: ecspi@0228C000 {
+					#address-cells = <1>;
+					#size-cells = <0>;
+					compatible = "fsl,imx6sx-ecspi", "fsl,imx51-ecspi";
+					reg = <0x0228C000 0x4000>;
+					interrupts = <0 18 0x04>;
+					clocks = <&clks IMX6SX_CLK_ECSPI5>,
+					       <&clks IMX6SX_CLK_ECSPI5>;
+					clock-names = "ipg", "per";
+					status = "disabled";
+				};
+
 				spdif: spdif@02004000 {
 					compatible = "fsl,imx6sx-spdif", "fsl,imx35-spdif";
 					reg = <0x02004000 0x4000>;
@@ -867,6 +880,15 @@
 				};
 			};
 
+			pwm5: pwm@022A4000 {
+				#pwm-cells = <2>;
+				compatible = "fsl,imx6sx-pwm", "fsl,imx27-pwm";
+				reg = <0x022A4000 0x4000>;
+				interrupts = <0 83 0x04>;
+				clocks = <&clks IMX6SX_CLK_PWM5>, <&clks IMX6SX_CLK_PWM5>;
+				clock-names = "ipg", "per";
+			};
+
 			sdma: sdma@020ec000 {
 				compatible = "fsl,imx6sx-sdma", "fsl,imx35-sdma";
 				reg = <0x020ec000 0x4000>;
@@ -1375,18 +1397,6 @@
 				status = "disabled";
 			};
 
-			ecspi5: ecspi@0228c000 {
-				#address-cells = <1>;
-				#size-cells = <0>;
-				compatible = "fsl,imx6sx-ecspi", "fsl,imx51-ecspi";
-				reg = <0x0228c000 0x4000>;
-				interrupts = <GIC_SPI 18 IRQ_TYPE_LEVEL_HIGH>;
-				clocks = <&clks IMX6SX_CLK_ECSPI5>,
-					 <&clks IMX6SX_CLK_ECSPI5>;
-				clock-names = "ipg", "per";
-				status = "disabled";
-			};
-
 			sema4: sema4@02290000 { /* sema4 */
 				compatible = "fsl,imx6sx-sema4";
 				reg = <0x02290000 0x4000>;
@@ -1424,16 +1434,6 @@
 				status = "disabled";
 			};
 
-			pwm5: pwm@022a4000 {
-				compatible = "fsl,imx6sx-pwm", "fsl,imx27-pwm";
-				reg = <0x022a4000 0x4000>;
-				interrupts = <GIC_SPI 83 IRQ_TYPE_LEVEL_HIGH>;
-				clocks = <&clks IMX6SX_CLK_PWM5>,
-					 <&clks IMX6SX_CLK_PWM5>;
-				clock-names = "ipg", "per";
-				#pwm-cells = <2>;
-			};
-
 			pwm6: pwm@022a8000 {
 				compatible = "fsl,imx6sx-pwm", "fsl,imx27-pwm";
 				reg = <0x022a8000 0x4000>;
@@ -1492,5 +1492,25 @@
 			power-domains = <&gpc 2>;
 			status = "disabled";
 		};
+
+		pinctrl_audmux_4: audmuxgrp-4 {
+			fsl,pins = <
+				MX6SX_PAD_SD4_RESET_B__AUDMUX_MCLK	0x130B0
+				MX6SX_PAD_SD3_DATA1__AUDMUX_AUD6_TXC 	0x130b0
+				MX6SX_PAD_SD3_DATA3__AUDMUX_AUD6_TXD    0x130b0
+				MX6SX_PAD_SD3_DATA2__AUDMUX_AUD6_TXFS 	0x130b0
+				MX6SX_PAD_SD3_DATA0__AUDMUX_AUD6_RXD  	0x130b0
+			>;
+		};
+
+		pinctrl_audmux_5: audmuxgrp-5 {
+			fsl,pins = <
+				MX6SX_PAD_SD1_DATA1__AUDMUX_AUD5_TXC 	0x130b0
+				MX6SX_PAD_SD1_DATA3__AUDMUX_AUD5_TXD    0x130b0
+				MX6SX_PAD_SD1_DATA2__AUDMUX_AUD5_TXFS 	0x130b0
+				MX6SX_PAD_SD1_DATA0__AUDMUX_AUD5_RXD  	0x130b0
+			>;
+		};
+
 	};
 };
diff --git a/arch/arm/mach-imx/clk-imx6sx.c b/arch/arm/mach-imx/clk-imx6sx.c
index 8431576..9326213 100644
--- a/arch/arm/mach-imx/clk-imx6sx.c
+++ b/arch/arm/mach-imx/clk-imx6sx.c
@@ -108,7 +108,8 @@ static int const clks_init_on[] __initconst = {
 	IMX6SX_CLK_IPMUX1, IMX6SX_CLK_IPMUX2, IMX6SX_CLK_IPMUX3,
 	IMX6SX_CLK_WAKEUP, IMX6SX_CLK_MMDC_P0_FAST, IMX6SX_CLK_MMDC_P0_IPG,
 	IMX6SX_CLK_ROM, IMX6SX_CLK_ARM, IMX6SX_CLK_IPG, IMX6SX_CLK_OCRAM,
-	IMX6SX_CLK_PER2_MAIN, IMX6SX_CLK_PERCLK,
+	IMX6SX_CLK_PER2_MAIN, IMX6SX_CLK_PERCLK, IMX6SX_CLK_ENET_REF, IMX6SX_CLK_ENET2_REF,
+	IMX6SX_CLK_ENET2_REF_125M, IMX6SX_CLK_ENET_PTP_REF, IMX6SX_CLK_ENET_PTP, IMX6SX_CLK_AUDIO
 };
 
 static struct clk_div_table clk_enet_ref_table[] = {
@@ -608,8 +609,16 @@ static void __init imx6sx_clocks_init(struct device_node *ccm_node)
 	imx_clk_set_parent(clks[IMX6SX_CLK_ENET_PRE_SEL], clks[IMX6SX_CLK_PLL2_PFD2]);
 	imx_clk_set_parent(clks[IMX6SX_CLK_ENET_SEL], clks[IMX6SX_CLK_ENET_PODF]);
 	imx_clk_set_rate(clks[IMX6SX_CLK_ENET_PODF], 200000000);
-	imx_clk_set_rate(clks[IMX6SX_CLK_ENET_REF], 125000000);
-	imx_clk_set_rate(clks[IMX6SX_CLK_ENET2_REF], 125000000);
+        if (of_machine_is_compatible("fsl,imx6sx-smarcore"))
+	{  		
+		clk_set_rate(clks[IMX6SX_CLK_ENET_REF], 125000000);
+		clk_set_rate(clks[IMX6SX_CLK_ENET2_REF], 125000000);
+	}
+	else
+	{
+		clk_set_rate(clks[IMX6SX_CLK_ENET_REF], 25000000);
+		clk_set_rate(clks[IMX6SX_CLK_ENET2_REF], 25000000);
+	}
 
 	/* Audio clocks */
 	imx_clk_set_rate(clks[IMX6SX_CLK_PLL4_AUDIO_DIV], 393216000);
diff --git a/arch/arm/mach-imx/mach-imx6sx.c b/arch/arm/mach-imx/mach-imx6sx.c
index eda08df..5208add 100755
--- a/arch/arm/mach-imx/mach-imx6sx.c
+++ b/arch/arm/mach-imx/mach-imx6sx.c
@@ -197,9 +197,11 @@ static int ar8031_phy_fixup(struct phy_device *dev)
 #define PHY_ID_AR8031   0x004dd074
 static void __init imx6sx_enet_phy_init(void)
 {
+#ifdef TOLTO_ICORE
 	if (IS_BUILTIN(CONFIG_PHYLIB))
 		phy_register_fixup_for_uid(PHY_ID_AR8031, 0xffffffff,
 					   ar8031_phy_fixup);
+#endif
 }
 
 static void __init imx6sx_enet_clk_sel(void)
diff --git a/drivers/input/misc/ad714x.c b/drivers/input/misc/ad714x.c
index 7a61e9e..29383b8 100644
--- a/drivers/input/misc/ad714x.c
+++ b/drivers/input/misc/ad714x.c
@@ -6,12 +6,15 @@
  * Licensed under the GPL-2 or later.
  */
 
+#define DEBUG
 #include <linux/device.h>
 #include <linux/input.h>
 #include <linux/interrupt.h>
 #include <linux/slab.h>
 #include <linux/input/ad714x.h>
 #include <linux/module.h>
+#include <linux/of.h>
+#include <linux/of_device.h>
 #include "ad714x.h"
 
 #define AD714X_PWR_CTRL           0x0
@@ -960,6 +963,131 @@ static irqreturn_t ad714x_interrupt_thread(int irq, void *data)
 	return IRQ_HANDLED;
 }
 
+
+#ifdef CONFIG_OF
+
+struct ad714x_button_plat button_plat[4];
+#define CDC_OFST_HI     0x400
+#define CDC_OFST_LO     0x400
+#define CDC_OFST_CLAMP  0x280
+#define KEYNUM 4 //  6  messo da Claudio.. usati solo 4 tasti
+#define STAGES_USED (0xFF >> (8 - KEYNUM))
+
+static short unsigned sys_cfg_reg[8] = {0x00B2, 0x0, 0x3230, 0x0419, 0x832, STAGES_USED, STAGES_USED, 0x0};
+
+static short unsigned  StageBuffer[12][8] = {
+  //======================
+  //= Stage 0 - CIN0 (+) =
+  //======================
+	{0xFFFE, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+
+  //======================
+  //= Stage 1 - CIN1 (+) =
+  //======================
+	{0xFFFB, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+
+  //======================
+  //= Stage 2 - CIN2 (+) =
+  //======================
+	{0xFFEF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+
+  //======================
+  //= Stage 3 - CIN3 (+) =
+  //======================
+	{0xFFBF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+
+  //===========================
+  //= Stage 4 - Not connected =
+  //===========================
+	{0xFFFF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+    
+  //===========================
+  //= Stage 5 - Not connected =
+  //===========================
+	{0xFFFF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+  
+  //===========================
+  //= Stage 6 - Not connected =
+  //===========================
+	{0xFFFF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+    
+  //===========================
+  //= Stage 7 - Not connected =
+  //===========================
+	{0xFFFF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+    
+  //===========================
+  //= Stage 8 - Not connected
+  //===========================
+	{0xFFFF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+  
+  //===========================
+  //= Stage 9 - Not connected =
+  //===========================
+	{0xFFFF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+  
+  //============================
+  //= Stage 10 - Not Connected =
+  //============================
+	{0xFFFF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP},
+    
+  
+  //============================
+  //= Stage 11 - Not Connected =
+  //============================
+	{0xFFFF, 0x1FFF, 0x0F00, 0x2626, CDC_OFST_LO, CDC_OFST_HI, CDC_OFST_CLAMP, CDC_OFST_CLAMP}
+
+};
+
+static int ad714x_i2c_probe_dt(struct device *dev,
+				struct ad714x_platform_data *tsdata)
+{
+	struct device_node *np = dev->of_node;
+	int i, j;
+
+	of_property_read_u32(np, "button_num", &tsdata->button_num);
+	of_property_read_u32(np, "touchpad_num", &tsdata->touchpad_num);
+	of_property_read_u32(np, "wheel_num", &tsdata->wheel_num);
+	of_property_read_u32(np, "slider_num", &tsdata->slider_num);
+/* TBD da agganciare tasti a DT */
+	tsdata->button_num = 4;
+	tsdata->button = button_plat;
+	i = 0;
+	tsdata->button[i].keycode = KEY_1;
+	tsdata->button[i].l_mask = 0;
+	tsdata->button[i].h_mask = 0x8;
+
+	i++;
+	tsdata->button[i].keycode = KEY_2;
+	tsdata->button[i].l_mask = 0;
+	tsdata->button[i].h_mask = 0x4;
+
+	i++;
+	tsdata->button[i].keycode = KEY_3;
+	tsdata->button[i].l_mask = 0;
+	tsdata->button[i].h_mask = 0x2;
+
+	i++;
+	tsdata->button[i].keycode =  KEY_4;
+	tsdata->button[i].l_mask = 0;
+	tsdata->button[i].h_mask = 0x1;
+
+	for (i = 0; i < STAGE_NUM; i++) 
+		for (j = 0; j < STAGE_CFGREG_NUM; j++)
+		tsdata->stage_cfg_reg[i][j] = StageBuffer[i][j];
+
+	for (i = 0; i < 8; i++) 
+ 		tsdata->sys_cfg_reg[i] = sys_cfg_reg[i];
+	return 0;
+}
+#else
+static inline int ad714x_i2c_probe_dt(struct device *dev,
+					struct ad714x_platform_data *tsdata)
+{
+	return -ENODEV;
+}
+#endif
+
 #define MAX_DEVICE_NUM 8
 struct ad714x_chip *ad714x_probe(struct device *dev, u16 bus_type, int irq,
 				 ad714x_read_t read, ad714x_write_t write)
@@ -1003,6 +1131,7 @@ struct ad714x_chip *ad714x_probe(struct device *dev, u16 bus_type, int irq,
 
 	ad714x->hw = plat_data;
 
+
 	drv_mem = ad714x + 1;
 	ad714x->sw = drv_mem;
 	drv_mem += sizeof(*ad714x->sw);
@@ -1025,8 +1154,8 @@ struct ad714x_chip *ad714x_probe(struct device *dev, u16 bus_type, int irq,
 		goto err_free_mem;
 
 	/* initialize and request sw/hw resources */
-
 	ad714x_hw_init(ad714x);
+
 	mutex_init(&ad714x->mutex);
 
 	/*
@@ -1133,6 +1262,7 @@ struct ad714x_chip *ad714x_probe(struct device *dev, u16 bus_type, int irq,
 		}
 	}
 
+
 	/* all buttons use one input node */
 	if (ad714x->hw->button_num > 0) {
 		struct ad714x_button_plat *bt_plat = ad714x->hw->button;
@@ -1162,8 +1292,8 @@ struct ad714x_chip *ad714x_probe(struct device *dev, u16 bus_type, int irq,
 		alloc_idx++;
 	}
 
-	irqflags = plat_data->irqflags ?: IRQF_TRIGGER_FALLING;
-	irqflags |= IRQF_ONESHOT;
+//	irqflags = plat_data->irqflags ?: IRQF_TRIGGER_FALLING;
+	irqflags = IRQF_ONESHOT| IRQF_TRIGGER_FALLING;
 
 	error = request_threaded_irq(ad714x->irq, NULL, ad714x_interrupt_thread,
 				     irqflags, "ad714x_captouch", ad714x);
diff --git a/drivers/input/touchscreen/edt-ft5x06.c b/drivers/input/touchscreen/edt-ft5x06.c
index 2f945b3..d5127f1 100644
--- a/drivers/input/touchscreen/edt-ft5x06.c
+++ b/drivers/input/touchscreen/edt-ft5x06.c
@@ -56,6 +56,14 @@
 
 #define NO_REGISTER			0xff
 
+#define M09_REGISTER_THRESHOLD		0x80
+#define M09_REGISTER_GAIN		0x92
+#define M09_REGISTER_OFFSET		0x93
+#define M09_REGISTER_NUM_X		0x94
+#define M09_REGISTER_NUM_Y		0x95
+
+#define NO_REGISTER			0xff
+
 #define WORK_REGISTER_OPMODE		0x3c
 #define FACTORY_REGISTER_OPMODE		0x01
 
diff --git a/drivers/pci/host/pci-imx6.c b/drivers/pci/host/pci-imx6.c
index 03234aa..5b6f06f 100644
--- a/drivers/pci/host/pci-imx6.c
+++ b/drivers/pci/host/pci-imx6.c
@@ -11,7 +11,7 @@
  * it under the terms of the GNU General Public License version 2 as
  * published by the Free Software Foundation.
  */
-
+#define DEBUG
 #include <linux/clk.h>
 #include <linux/delay.h>
 #include <linux/gpio.h>
@@ -347,16 +347,18 @@ static int imx6_pcie_deassert_core_reset(struct pcie_port *pp)
 		dev_err(pp->dev, "unable to enable pcie_phy clock\n");
 		goto err_pcie_phy;
 	}
-
+/*
 	if (!IS_ENABLED(CONFIG_EP_MODE_IN_EP_RC_SYS)
 			&& !IS_ENABLED(CONFIG_RC_MODE_IN_EP_RC_SYS)) {
+*/
 		ret = clk_prepare_enable(imx6_pcie->pcie_bus);
 		if (ret) {
 			dev_err(pp->dev, "unable to enable pcie_bus clock\n");
 			goto err_pcie_bus;
 		}
+/*
 	}
-
+*/
 	ret = clk_prepare_enable(imx6_pcie->pcie);
 	if (ret) {
 		dev_err(pp->dev, "unable to enable pcie clock\n");
diff --git a/drivers/pinctrl/devicetree.c b/drivers/pinctrl/devicetree.c
index a53d15c..7c6d617 100644
--- a/drivers/pinctrl/devicetree.c
+++ b/drivers/pinctrl/devicetree.c
@@ -21,6 +21,7 @@
 #include <linux/of_gpio.h>
 #include <linux/pinctrl/pinctrl.h>
 #include <linux/slab.h>
+#include <linux/delay.h>
 
 #include "core.h"
 #include "devicetree.h"
@@ -198,6 +199,8 @@ static int dt_gpio_assert_pinctrl(struct pinctrl *p)
 		if (ret < 0)
 			return ret;
 
+		udelay(1000);
+
 		if (flags & OF_GPIO_ACTIVE_LOW)
 			continue;
 
diff --git a/drivers/usb/serial/GobiSerial.c b/drivers/usb/serial/GobiSerial.c
new file mode 100644
index 0000000..d746583
--- /dev/null
+++ b/drivers/usb/serial/GobiSerial.c
@@ -0,0 +1,812 @@
+/*===========================================================================
+FILE:
+   GobiSerial.c
+
+DESCRIPTION:
+   Linux Qualcomm Serial USB driver Implementation
+
+PUBLIC DRIVER FUNCTIONS:
+   GobiProbe
+   GobiOpen
+   GobiClose
+   GobiReadBulkCallback (if kernel is less than 2.6.25)
+   GobiSuspend
+   GobiResume (if kernel is less than 2.6.24)
+
+Copyright (c) 2011, Code Aurora Forum. All rights reserved.
+
+Redistribution and use in source and binary forms, with or without
+modification, are permitted provided that the following conditions are met:
+    * Redistributions of source code must retain the above copyright
+      notice, this list of conditions and the following disclaimer.
+    * Redistributions in binary form must reproduce the above copyright
+      notice, this list of conditions and the following disclaimer in the
+      documentation and/or other materials provided with the distribution.
+    * Neither the name of Code Aurora Forum nor
+      the names of its contributors may be used to endorse or promote
+      products derived from this software without specific prior written
+      permission.
+
+
+THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
+AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
+IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
+ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT OWNER OR CONTRIBUTORS BE
+LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
+CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
+SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
+INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
+CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
+ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
+POSSIBILITY OF SUCH DAMAGE.
+==========================================================================*/
+//---------------------------------------------------------------------------
+// Include Files
+//---------------------------------------------------------------------------
+
+#include <linux/tty.h>
+#include <linux/tty_flip.h>
+#include <linux/usb.h>
+#include <linux/usb/serial.h>
+#include <linux/version.h>
+#include <linux/module.h>
+
+//---------------------------------------------------------------------------
+// Global veriable and defination
+//---------------------------------------------------------------------------
+
+// Version Information
+#define DRIVER_VERSION "2011-07-29-1026"
+#define DRIVER_AUTHOR "Qualcomm Innovation Center"
+#define DRIVER_DESC "GobiSerial"
+
+#define NUM_BULK_EPS         1
+#define MAX_BULK_EPS         6
+
+// Debug flag
+static int debug = 1;
+
+// Global pointer to usb_serial_generic_close function
+// This function is not exported, which is why we have to use a pointer
+// instead of just calling it.
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,26 ))
+   void (* gpClose)(
+      struct usb_serial_port *,
+      struct file * );
+#elif (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,30 ))
+   void (* gpClose)(
+      struct tty_struct *,
+      struct usb_serial_port *,
+      struct file * );
+#else // > 2.6.30
+   void (* gpClose)( struct usb_serial_port * );
+#endif
+
+// DBG macro
+#if 0
+#define DBG( format, arg... ) \
+   if (debug == 1)\
+   { \
+      printk( KERN_INFO "GobiSerial::%s " format, __FUNCTION__, ## arg ); \
+   }
+#else
+#define DBG(format, arg...) \
+  printk(KERN_INFO format, ##arg);
+#endif
+
+struct gobiserial_driver_info
+{
+    u8 *iface_info;
+    u32 iface_info_len;
+};
+
+static const u8 sim5360_iface_info_array[] = { 4 };
+static const u8 sim7100_iface_info_array[] = { 5 };
+
+static const struct gobiserial_driver_info sim5360_iface_info =
+{
+  .iface_info = sim5360_iface_info_array,
+  .iface_info_len = sizeof(sim5360_iface_info_array)/sizeof(sim5360_iface_info_array[0])
+};
+
+static const struct gobiserial_driver_info sim7100_iface_info =
+{
+  .iface_info = sim7100_iface_info_array,
+  .iface_info_len = sizeof(sim7100_iface_info_array)/sizeof(sim7100_iface_info_array[0])
+};
+
+/*=========================================================================*/
+// Function Prototypes
+/*=========================================================================*/
+
+// Attach to correct interfaces
+static int GobiProbe(
+   struct usb_serial * pSerial,
+   const struct usb_device_id * pID );
+
+// Start GPS if GPS port, run usb_serial_generic_open
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,26 ))
+   int GobiOpen(
+      struct usb_serial_port *   pPort,
+      struct file *              pFilp );
+#elif (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,31 ))
+   int GobiOpen(
+      struct tty_struct *        pTTY,
+      struct usb_serial_port *   pPort,
+      struct file *              pFilp );
+#else // > 2.6.31
+   int GobiOpen(
+      struct tty_struct *        pTTY,
+      struct usb_serial_port *   pPort );
+#endif
+
+// Stop GPS if GPS port, run usb_serial_generic_close
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,26 ))
+   void GobiClose(
+      struct usb_serial_port *,
+      struct file * );
+#elif (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,30 ))
+   void GobiClose(
+      struct tty_struct *,
+      struct usb_serial_port *,
+      struct file * );
+#else // > 2.6.30
+   void GobiClose( struct usb_serial_port * );
+#endif
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 2,6,25 ))
+
+// Read data from USB, push to TTY and user space
+static void GobiReadBulkCallback( struct urb * pURB );
+
+#endif
+
+// Set reset_resume flag
+static int GobiSuspend(
+   struct usb_interface *     pIntf,
+   pm_message_t               powerEvent );
+
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,23 ))
+
+// Restart URBs killed during usb_serial_suspend
+int GobiResume( struct usb_interface * pIntf );
+
+#endif
+
+/*=========================================================================*/
+// Qualcomm Gobi 3000 VID/PIDs
+/*=========================================================================*/
+static struct usb_device_id GobiVIDPIDTable[] =
+{
+   { USB_DEVICE( 0x05c6, 0x920c ) },   // Gobi 3000 QDL device
+   { USB_DEVICE( 0x05c6, 0x920d ) },   // Gobi 3000 Composite Device
+   { USB_DEVICE( 0x05c6, 0x1e0e) },   // Gobi 3000 Composite Device
+   {
+     USB_DEVICE( 0x05c6, 0x9000),
+     .driver_info = (kernel_ulong_t)&sim5360_iface_info
+   },
+   {
+       USB_DEVICE( 0x1e0e, 0x9001),
+       .driver_info = (kernel_ulong_t)&sim7100_iface_info
+   },   // Gobi 3000 Composite Device
+   { }                               // Terminating entry
+};
+MODULE_DEVICE_TABLE( usb, GobiVIDPIDTable );
+
+/*=========================================================================*/
+// Struct usb_serial_driver
+// Driver structure we register with the USB core
+/*=========================================================================*/
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,5,0 ))
+static struct usb_driver GobiDriver =
+{
+   .name       = "GobiSerial",
+   .probe      = usb_serial_probe,
+   .disconnect = usb_serial_disconnect,
+   .id_table   = GobiVIDPIDTable,
+   .suspend    = GobiSuspend,
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,23 ))
+   .resume     = GobiResume,
+#else
+   .resume     = usb_serial_resume,
+#endif
+   .supports_autosuspend = true,
+};
+#endif
+
+/*=========================================================================*/
+// Struct usb_serial_driver
+/*=========================================================================*/
+static struct usb_serial_driver gGobiDevice =
+{
+   .driver =
+   {
+      .owner     = THIS_MODULE,
+      .name      = "GobiSerial driver",
+   },
+   .description         = "GobiSerial",
+   .id_table            = GobiVIDPIDTable,
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,5,0 ))
+   .usb_driver          = &GobiDriver,
+#endif
+   .num_ports           = 1,
+   .probe               = GobiProbe,
+   .open                = GobiOpen,
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 2,6,25 ))
+   .num_interrupt_in    = NUM_DONT_CARE,
+   .num_bulk_in         = 1,
+   .num_bulk_out        = 1,
+   .read_bulk_callback  = GobiReadBulkCallback,
+#endif
+};
+
+//---------------------------------------------------------------------------
+// USB serial core overridding Methods
+//---------------------------------------------------------------------------
+
+/*===========================================================================
+METHOD:
+   GobiProbe (Free Method)
+
+DESCRIPTION:
+   Attach to correct interfaces
+
+PARAMETERS:
+   pSerial    [ I ] - Serial structure
+   pID        [ I ] - VID PID table
+
+RETURN VALUE:
+   int - negative error code on failure
+         zero on success
+===========================================================================*/
+static int GobiProbe(
+   struct usb_serial *             pSerial,
+   const struct usb_device_id *    pID )
+{
+   // Assume failure
+   int nRetval = -ENODEV;
+
+   int nNumInterfaces;
+   int nInterfaceNum;
+   DBG( "\n" );
+
+   // Test parameters
+   if ( (pSerial == NULL)
+   ||   (pSerial->dev == NULL)
+   ||   (pSerial->dev->actconfig == NULL)
+   ||   (pSerial->interface == NULL)
+   ||   (pSerial->interface->cur_altsetting == NULL)
+   ||   (pSerial->type == NULL) )
+   {
+      DBG( "invalid parameter\n" );
+      return -EINVAL;
+   }
+
+   nNumInterfaces = pSerial->dev->actconfig->desc.bNumInterfaces;
+   DBG( "Num Interfaces = %d\n", nNumInterfaces );
+   nInterfaceNum = pSerial->interface->cur_altsetting->desc.bInterfaceNumber;
+   DBG( "This Interface = %d\n", nInterfaceNum );
+
+   if (nNumInterfaces == 1)
+   {
+      // QDL mode?
+      if (nInterfaceNum == 1 || nInterfaceNum == 0)
+      {
+         DBG( "QDL port found\n" );
+         nRetval = usb_set_interface( pSerial->dev,
+                                      nInterfaceNum,
+                                      0 );
+         if (nRetval < 0)
+         {
+            DBG( "Could not set interface, error %d\n", nRetval );
+         }
+      }
+      else
+      {
+         DBG( "Incorrect QDL interface number\n" );
+      }
+   }
+   else
+   {
+       unsigned long num;
+       bool is_supported = true;
+       u8 *iface_info;
+       printk("%d", ((struct gobiserial_driver_info*)pID->driver_info)->iface_info_len);
+       iface_info = ((struct gobiserial_driver_info*)pID->driver_info)->iface_info;
+       for (num=0; num<((struct gobiserial_driver_info*)pID->driver_info)->iface_info_len; num++)
+       {
+         printk("num=%d, inface_num=%p", num, iface_info);
+         printk("num=%d, inface_num=%d", num, iface_info[num]);
+
+         if (((struct gobiserial_driver_info*)pID->driver_info)->iface_info[num] == nInterfaceNum)
+           {
+               is_supported = false;
+               break;
+           }
+
+       }
+      // Composite mode
+      if (is_supported)
+      {
+         DBG( "Modem port found\n" );
+         nRetval = usb_set_interface( pSerial->dev,
+                                      nInterfaceNum,
+                                      0 );
+         if (nRetval < 0)
+         {
+            DBG( "Could not set interface, error %d\n", nRetval );
+         }
+      }
+      else
+      {
+         // Not a port we want to support at this time
+
+         DBG( "Unsupported interface number\n" );
+      }
+   }
+
+   if (nRetval == 0)
+   {
+      // Clearing endpoint halt is a magic handshake that brings
+      // the device out of low power (airplane) mode
+      // NOTE: FCC verification should be done before this, if required
+      struct usb_host_endpoint * pEndpoint;
+      int endpointIndex;
+      int numEndpoints = pSerial->interface->cur_altsetting
+                         ->desc.bInterfaceNumber;
+
+      for (endpointIndex = 0; endpointIndex < numEndpoints; endpointIndex++)
+      {
+         pEndpoint = pSerial->interface->cur_altsetting->endpoint
+                   + endpointIndex;
+
+         if (pEndpoint != NULL
+         &&  usb_endpoint_dir_out( &pEndpoint->desc ) == true)
+         {
+            int pipe = usb_sndbulkpipe( pSerial->dev,
+                                        pEndpoint->desc.bEndpointAddress );
+            nRetval = usb_clear_halt( pSerial->dev, pipe );
+
+            // Should only be one
+            break;
+         }
+      }
+   }
+
+   return nRetval;
+}
+
+/*===========================================================================
+METHOD:
+   GobiOpen (Free Method)
+
+DESCRIPTION:
+   Start GPS if GPS port, run usb_serial_generic_open
+
+PARAMETERS:
+   pTTY    [ I ] - TTY structure (only on kernels <= 2.6.26)
+   pPort   [ I ] - USB serial port structure
+   pFilp   [ I ] - File structure (only on kernels <= 2.6.31)
+
+RETURN VALUE:
+   int - zero for success
+       - negative errno on error
+===========================================================================*/
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,26 ))
+int GobiOpen(
+   struct usb_serial_port *   pPort,
+   struct file *              pFilp )
+#elif (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,31 ))
+int GobiOpen(
+   struct tty_struct *        pTTY,
+   struct usb_serial_port *   pPort,
+   struct file *              pFilp )
+#else // > 2.6.31
+int GobiOpen(
+   struct tty_struct *        pTTY,
+   struct usb_serial_port *   pPort )
+#endif
+{
+   const char startMessage[] = "$GPS_START";
+   int nResult;
+   int bytesWrote;
+
+   DBG( "\n" );
+
+   // Test parameters
+   if ( (pPort == NULL)
+   ||   (pPort->serial == NULL)
+   ||   (pPort->serial->dev == NULL)
+   ||   (pPort->serial->interface == NULL)
+   ||   (pPort->serial->interface->cur_altsetting == NULL) )
+   {
+      DBG( "invalid parameter\n" );
+      return -EINVAL;
+   }
+
+   // Is this the GPS port?
+   if (pPort->serial->interface->cur_altsetting->desc.bInterfaceNumber == 3)
+   {
+      // Send startMessage, 1s timeout
+      nResult = usb_bulk_msg( pPort->serial->dev,
+                              usb_sndbulkpipe( pPort->serial->dev,
+                                               pPort->bulk_out_endpointAddress ),
+                              (void *)&startMessage[0],
+                              sizeof( startMessage ),
+                              &bytesWrote,
+                              1000 );
+      if (nResult != 0)
+      {
+         DBG( "error %d sending startMessage\n", nResult );
+         return nResult;
+      }
+      if (bytesWrote != sizeof( startMessage ))
+      {
+         DBG( "invalid write size %d, %ld\n",
+              bytesWrote,
+              sizeof( startMessage ) );
+         return -EIO;
+      }
+   }
+
+   // Pass to usb_serial_generic_open
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,26 ))
+   return usb_serial_generic_open( pPort, pFilp );
+#elif (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,31 ))
+   return usb_serial_generic_open( pTTY, pPort, pFilp );
+#else // > 2.6.31
+   return usb_serial_generic_open( pTTY, pPort );
+#endif
+}
+
+/*===========================================================================
+METHOD:
+   GobiClose (Free Method)
+
+DESCRIPTION:
+   Stop GPS if GPS port, run usb_serial_generic_close
+
+PARAMETERS:
+   pTTY    [ I ] - TTY structure (only if kernel > 2.6.26 and <= 2.6.30)
+   pPort   [ I ] - USB serial port structure
+   pFilp   [ I ] - File structure (only on kernel <= 2.6.30)
+===========================================================================*/
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,26 ))
+void GobiClose(
+   struct usb_serial_port *   pPort,
+   struct file *              pFilp )
+#elif (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,30 ))
+void GobiClose(
+   struct tty_struct *        pTTY,
+   struct usb_serial_port *   pPort,
+   struct file *              pFilp )
+#else // > 2.6.30
+void GobiClose( struct usb_serial_port * pPort )
+#endif
+{
+   const char stopMessage[] = "$GPS_STOP";
+   int nResult;
+   int bytesWrote;
+
+   DBG( "\n" );
+
+   // Test parameters
+   if ( (pPort == NULL)
+   ||   (pPort->serial == NULL)
+   ||   (pPort->serial->dev == NULL)
+   ||   (pPort->serial->interface == NULL)
+   ||   (pPort->serial->interface->cur_altsetting == NULL) )
+   {
+      DBG( "invalid parameter\n" );
+      return;
+   }
+
+   // Is this the GPS port?
+   if (pPort->serial->interface->cur_altsetting->desc.bInterfaceNumber == 3)
+   {
+      // Send stopMessage, 1s timeout
+      nResult = usb_bulk_msg( pPort->serial->dev,
+                              usb_sndbulkpipe( pPort->serial->dev,
+                                               pPort->bulk_out_endpointAddress ),
+                              (void *)&stopMessage[0],
+                              sizeof( stopMessage ),
+                              &bytesWrote,
+                              1000 );
+      if (nResult != 0)
+      {
+         DBG( "error %d sending stopMessage\n", nResult );
+      }
+      if (bytesWrote != sizeof( stopMessage ))
+      {
+         DBG( "invalid write size %d, %ld\n",
+              bytesWrote,
+              sizeof( stopMessage ) );
+      }
+   }
+
+   // Pass to usb_serial_generic_close
+   if (gpClose == NULL)
+   {
+      DBG( "NULL gpClose\n" );
+      return;
+   }
+
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,26 ))
+   gpClose( pPort, pFilp );
+#elif (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,30 ))
+   gpClose( pTTY, pPort, pFilp );
+#else // > 2.6.30
+   gpClose( pPort );
+#endif
+}
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 2,6,25 ))
+
+/*===========================================================================
+METHOD:
+   GobiReadBulkCallback (Free Method)
+
+DESCRIPTION:
+   Read data from USB, push to TTY and user space
+
+PARAMETERS:
+   pURB  [ I ] - USB Request Block (urb) that called us
+
+RETURN VALUE:
+===========================================================================*/
+static void GobiReadBulkCallback( struct urb * pURB )
+{
+   struct usb_serial_port * pPort = pURB->context;
+   struct tty_struct * pTTY = pPort->tty;
+   int nResult;
+   int nRoom = 0;
+   unsigned int pipeEP;
+
+   DBG( "port %d\n", pPort->number );
+
+   if (pURB->status != 0)
+   {
+      DBG( "nonzero read bulk status received: %d\n", pURB->status );
+
+      return;
+   }
+
+   usb_serial_debug_data( debug,
+                          &pPort->dev,
+                          __FUNCTION__,
+                          pURB->actual_length,
+                          pURB->transfer_buffer );
+
+   // We do no port throttling
+
+   // Push data to tty layer and user space read function
+   if (pTTY != 0 && pURB->actual_length)
+   {
+      nRoom = tty_buffer_request_room( pTTY, pURB->actual_length );
+      DBG( "room size %d %d\n", nRoom, 512 );
+      if (nRoom != 0)
+      {
+         tty_insert_flip_string( pTTY, pURB->transfer_buffer, nRoom );
+         tty_flip_buffer_push( pTTY );
+      }
+   }
+
+   pipeEP = usb_rcvbulkpipe( pPort->serial->dev,
+                             pPort->bulk_in_endpointAddress );
+
+   // For continuous reading
+   usb_fill_bulk_urb( pPort->read_urb,
+                      pPort->serial->dev,
+                      pipeEP,
+                      pPort->read_urb->transfer_buffer,
+                      pPort->read_urb->transfer_buffer_length,
+                      GobiReadBulkCallback,
+                      pPort );
+
+   nResult = usb_submit_urb( pPort->read_urb, GFP_ATOMIC );
+   if (nResult != 0)
+   {
+      DBG( "failed resubmitting read urb, error %d\n", nResult );
+   }
+}
+
+#endif
+
+/*===========================================================================
+METHOD:
+   GobiSuspend (Public Method)
+
+DESCRIPTION:
+   Set reset_resume flag
+
+PARAMETERS
+   pIntf          [ I ] - Pointer to interface
+   powerEvent     [ I ] - Power management event
+
+RETURN VALUE:
+   int - 0 for success
+         negative errno for failure
+===========================================================================*/
+static int GobiSuspend(
+   struct usb_interface *     pIntf,
+   pm_message_t               powerEvent )
+{
+   struct usb_serial * pDev;
+
+   if (pIntf == 0)
+   {
+      return -ENOMEM;
+   }
+
+   pDev = usb_get_intfdata( pIntf );
+   if (pDev == NULL)
+   {
+      return -ENXIO;
+   }
+
+   // Unless this is PM_EVENT_SUSPEND, make sure device gets rescanned
+   if ((powerEvent.event & PM_EVENT_SUSPEND) == 0)
+   {
+      pDev->dev->reset_resume = 1;
+   }
+
+   // Run usb_serial's suspend function
+   return usb_serial_suspend( pIntf, powerEvent );
+}
+
+#if (LINUX_VERSION_CODE <= KERNEL_VERSION( 2,6,23 ))
+
+/*===========================================================================
+METHOD:
+   GobiResume (Free Method)
+
+DESCRIPTION:
+   Restart URBs killed during usb_serial_suspend
+
+   Fixes 2 bugs in 2.6.23 kernel
+      1. pSerial->type->resume was NULL and unchecked, caused crash.
+      2. set_to_generic_if_null was not run for resume.
+
+PARAMETERS:
+   pIntf  [ I ] - Pointer to interface
+
+RETURN VALUE:
+   int - 0 for success
+         negative errno for failure
+===========================================================================*/
+int GobiResume( struct usb_interface * pIntf )
+{
+   struct usb_serial * pSerial = usb_get_intfdata( pIntf );
+   struct usb_serial_port * pPort;
+   int portIndex, errors, nResult;
+
+   if (pSerial == NULL)
+   {
+      DBG( "no pSerial\n" );
+      return -ENOMEM;
+   }
+   if (pSerial->type == NULL)
+   {
+      DBG( "no pSerial->type\n" );
+      return ENOMEM;
+   }
+   if (pSerial->type->resume == NULL)
+   {
+      // Expected behaviour in 2.6.23, in later kernels this was handled
+      // by the usb-serial driver and usb_serial_generic_resume
+      errors = 0;
+      for (portIndex = 0; portIndex < pSerial->num_ports; portIndex++)
+      {
+         pPort = pSerial->port[portIndex];
+         if (pPort->open_count > 0 && pPort->read_urb != NULL)
+         {
+            nResult = usb_submit_urb( pPort->read_urb, GFP_NOIO );
+            if (nResult < 0)
+            {
+               // Return first error we see
+               DBG( "error %d\n", nResult );
+               return nResult;
+            }
+         }
+      }
+
+      // Success
+      return 0;
+   }
+
+   // Execution would only reach this point if user has
+   // patched version of usb-serial driver.
+   return usb_serial_resume( pIntf );
+}
+
+#endif
+
+
+#if (LINUX_VERSION_CODE >= KERNEL_VERSION( 3,4,0 ))
+static struct usb_serial_driver * const serial_drivers[] = {
+	&gGobiDevice, NULL
+};
+#endif
+
+/*===========================================================================
+METHOD:
+   GobiInit (Free Method)
+
+DESCRIPTION:
+   Register the driver and device
+
+PARAMETERS:
+
+RETURN VALUE:
+   int - negative error code on failure
+         zero on success
+===========================================================================*/
+static int __init GobiInit( void )
+{
+   int nRetval = 0;
+   gpClose = NULL;
+
+   gGobiDevice.num_ports = NUM_BULK_EPS;
+
+   // Registering driver to USB serial core layer
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,4,0 ))
+   nRetval = usb_serial_register( &gGobiDevice );
+   if (nRetval != 0)
+   {
+      return nRetval;
+   }
+
+   // Registering driver to USB core layer
+   nRetval = usb_register( &GobiDriver );
+   if (nRetval != 0)
+   {
+      usb_serial_deregister( &gGobiDevice );
+      return nRetval;
+   }
+#elif (LINUX_VERSION_CODE < KERNEL_VERSION( 3,5,0 ))
+   nRetval = usb_serial_register_drivers(&GobiDriver, serial_drivers);
+#else
+   nRetval = usb_serial_register_drivers(serial_drivers, KBUILD_MODNAME, GobiVIDPIDTable);
+#endif
+   // This will be shown whenever driver is loaded
+   printk( KERN_INFO "%s: %s\n", DRIVER_DESC, DRIVER_VERSION );
+
+   return nRetval;
+}
+
+/*===========================================================================
+METHOD:
+   GobiExit (Free Method)
+
+DESCRIPTION:
+   Deregister the driver and device
+
+PARAMETERS:
+
+RETURN VALUE:
+===========================================================================*/
+static void __exit GobiExit( void )
+{
+   gpClose = NULL;
+
+#if (LINUX_VERSION_CODE < KERNEL_VERSION( 3,4,0 ))
+   usb_deregister( &GobiDriver );
+   usb_serial_deregister( &gGobiDevice );
+#elif (LINUX_VERSION_CODE > KERNEL_VERSION( 3,5,0 ))
+   usb_serial_deregister_drivers(serial_drivers);
+#else
+   usb_serial_deregister_drivers(&GobiDriver, serial_drivers);
+#endif
+}
+
+// Calling kernel module to init our driver
+module_init( GobiInit );
+module_exit( GobiExit );
+
+MODULE_VERSION( DRIVER_VERSION );
+MODULE_AUTHOR( DRIVER_AUTHOR );
+MODULE_DESCRIPTION( DRIVER_DESC );
+MODULE_LICENSE("Dual BSD/GPL");
+
+module_param( debug, bool, S_IRUGO | S_IWUSR );
+MODULE_PARM_DESC( debug, "Debug enabled or not" );
diff --git a/drivers/usb/serial/Kconfig b/drivers/usb/serial/Kconfig
index 3ce5c74..5605904 100644
--- a/drivers/usb/serial/Kconfig
+++ b/drivers/usb/serial/Kconfig
@@ -69,6 +69,12 @@ config USB_SERIAL_SIMPLE
 	  To compile this driver as a module, choose M here: the module
 	  will be called usb-serial-simple.
 
+config USB_GOBISERIAL
+	tristate "SIMCOM Modem USB Serial driver"
+	default y
+	help
+	  usb serial driver for SIMCOM modem
+
 config USB_SERIAL_AIRCABLE
 	tristate "USB AIRcable Bluetooth Dongle Driver"
 	help
diff --git a/drivers/video/mxc/mxc_lcdif.c b/drivers/video/mxc/mxc_lcdif.c
index a092fa5..02b1ebb 100644
--- a/drivers/video/mxc/mxc_lcdif.c
+++ b/drivers/video/mxc/mxc_lcdif.c
@@ -37,6 +37,51 @@ struct mxc_lcdif_data {
 
 static struct fb_videomode lcdif_modedb[] = {
 	{
+	 /* 1280x800 @ 60 Hz OPENFRAME CAP 10.1'' */ 
+	 "LCD-WXGAI", 60, 1280, 800, 14065,
+	 40, 40,
+	 10, 3,
+	 80, 10,
+	 FB_SYNC_CLK_LAT_FALL,
+	 FB_VMODE_NONINTERLACED,
+	 FB_MODE_IS_DETAILED,
+	},   
+	{
+	/* 1024x600 @ 60 Hz OPENFRAME RES 10.1'' */ 
+	"LCD-WSGA", 60, 1024, 600, 18939, 353, 47, 39, 4, 8, 2,
+	FB_SYNC_CLK_LAT_FALL | FB_SYNC_COMP_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT,
+	FB_VMODE_NONINTERLACED
+	 },
+	{
+	/* 1280x480 @ 60 Hz */
+	"LDB-HSXGA", 60, 1280, 480, 18939, 353, 47, 39, 4, 8, 2,
+	FB_SYNC_CLK_LAT_FALL | FB_SYNC_COMP_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT,
+	FB_VMODE_NONINTERLACED
+	 },              	
+        {
+	/* 480x272 @ 60 Hz  OPENFRAME 4.3'' */
+	"URT-8484MD" , 60, 480, 272, 100000,  8, 2, 11, 2 ,   35 , 2 ,
+ 	FB_SYNC_CLK_LAT_FALL,
+	FB_VMODE_NONINTERLACED,
+	0,}, 	{
+	 /* URT 640x480 @ 60 Hz OPENFRAME 5.7'' */
+	 "URT-VGA" , 60, 640, 480, 38000, 80, 80, 22, 22, 30, 3,
+	 FB_SYNC_CLK_LAT_FALL,
+	 FB_VMODE_NONINTERLACED,
+	 0,}, 
+	{
+	 /* URT 800x480 @ 60 Hz OPENFRAME 7'' */
+	 "URT-LVDS" , 60, 800, 480, 30000, 30, 30, 5, 5, 64, 20,
+	 /*FB_SYNC_CLK_IDLE_EN |*/ FB_SYNC_CLK_LAT_FALL,
+	 FB_VMODE_NONINTERLACED,
+	 0,},   
+	 {   
+	 /* 800x480 @ 60 Hz OPENFRAME 10.4'' */ 
+	 "HIT-LVDS" , 60, 800, 600, 30000, 30, 30, 5, 5, 64, 20,
+	 /*FB_SYNC_CLK_IDLE_EN |*/ FB_SYNC_CLK_LAT_FALL,
+	 FB_VMODE_NONINTERLACED,
+	 0,},                                        
+ 	{
 	/* 800x480 @ 57 Hz , pixel clk @ 27MHz */
 	"CLAA-WVGA", 57, 800, 480, 37037, 40, 60, 10, 10, 20, 10,
 	FB_SYNC_CLK_LAT_FALL,
@@ -73,6 +118,25 @@ static struct fb_videomode lcdif_modedb[] = {
 	 FB_VMODE_NONINTERLACED,
 	 0,},
 	{
+	 /* 800x480 @ 60 Hz STARTERKIT 7'' */ 
+	 "Amp-WD" , 60, 800, 480, 30000, 30, 30, 5, 5, 64, 20,
+	 FB_SYNC_CLK_LAT_FALL,
+	 FB_VMODE_NONINTERLACED,
+	 0,},
+	{
+	 /* 800x480 @ 60 Hz , pixel clk @ 32MHz */
+	 "URT-WVGA", 60, 800, 480, 30000, 30, 30, 5, 5, 64, 20,
+	 FB_SYNC_CLK_IDLE_EN,
+	 FB_VMODE_NONINTERLACED,
+	 0,},
+	 {
+         /* 1280x480 @ 60 Hz */
+	"LDB-HSXGA", 60, 1280, 480, 18939, 353, 47, 39, 4, 8, 2,
+	FB_SYNC_CLK_LAT_FALL | FB_SYNC_COMP_HIGH_ACT | FB_SYNC_VERT_HIGH_ACT,
+	FB_VMODE_NONINTERLACED
+         },
+
+	{
 	 /* 1280x800 @ 60 Hz OPENFRAME CAP 10.1'' */ 
 	 "LCD-WXGAI", 60, 1280, 800, 14065,
 	 40, 40,
-- 
1.9.1

