diff --git a/drivers/input/touchscreen/Kconfig b/drivers/input/touchscreen/Kconfig
index 041a3da..f257d49 100644
--- a/drivers/input/touchscreen/Kconfig
+++ b/drivers/input/touchscreen/Kconfig
@@ -365,6 +365,19 @@ config TOUCHSCREEN_MAX11801
 
 	  To compile this driver as a module, choose M here: the
 	  module will be called max11801_ts.
+	  
+config ENGICAM_MAX1180_CUSTOM
+	bool "MAX11801 for Engicam board"
+	default Y
+	depends on TOUCHSCREEN_MAX11801
+	help
+	  Select this option for include Engicam custom driver improvment. This
+	  option is strictly recommended for big size LCD screen and resistive
+	  openframe board.
+	  
+	  If unsure, say Y.
+	  
+	  Deselect this option for using default driver configuration.
 
 config TOUCHSCREEN_MCS5000
 	tristate "MELFAS MCS-5000 touchscreen"
diff --git a/drivers/input/touchscreen/max11801_ts.c b/drivers/input/touchscreen/max11801_ts.c
index 1dbf100..4016071 100644
--- a/drivers/input/touchscreen/max11801_ts.c
+++ b/drivers/input/touchscreen/max11801_ts.c
@@ -44,8 +44,6 @@
 #include <linux/of.h>
 #include <linux/of_device.h>
 
-#define ICORE6M_DRIVER_TS
-
 /* Register Address define */
 #define GENERNAL_STATUS_REG		0x00
 #define GENERNAL_CONF_REG		0x01
@@ -180,6 +178,14 @@ static int max11801_write_reg(struct i2c_client *client, int addr, int data)
 
 static int px, py;
 
+#ifdef CONFIG_ENGICAM_MAX1180_CUSTOM
+  #define NSAMPLE 10
+  static int data_x[NSAMPLE];
+  static int data_y[NSAMPLE];
+  static int sample_count=0;
+  static int ii=0;
+#endif
+
 static irqreturn_t max11801_ts_interrupt(int irq, void *dev_id)
 {
 	struct max11801_data *data = dev_id;
@@ -253,19 +259,59 @@ static irqreturn_t max11801_ts_interrupt(int irq, void *dev_id)
 		case EVENT_INIT:
 			/* fall through */
 		case EVENT_MIDDLE:
-			input_report_abs(data->input_dev, ABS_X, x);
 			y = MAX11801_MAX_Y - y;	/* Calibration */
-			input_report_abs(data->input_dev, ABS_Y, y);
-			input_report_abs(data->input_dev, ABS_PRESSURE, 1);
-			input_sync(data->input_dev);
-			px=x;
-			py=y;
+			#ifdef CONFIG_ENGICAM_MAX1180_CUSTOM
+			  if (sample_count>1)
+			  {
+				  memcpy(data_x,&data_x[1],sizeof(data_x[0])*(NSAMPLE-1));
+				  memcpy(data_y,&data_y[1],sizeof(data_x[0])*(NSAMPLE-1));
+				  data_x[NSAMPLE-1]=x;
+				  data_y[NSAMPLE-1]=y;
+				  x=0;
+				  y=0;
+				  for(ii=0;ii<NSAMPLE;ii++)
+				  {
+				    x+=data_x[ii];
+				    y+=data_y[ii];
+				  }
+				  x/=NSAMPLE;
+				  y/=NSAMPLE;
+				  px=x;
+				  py=y;
+				  input_report_abs(data->input_dev, ABS_X, x);
+				  input_report_abs(data->input_dev, ABS_Y, y);
+				  input_report_abs(data->input_dev, ABS_PRESSURE, 1);
+				  input_sync(data->input_dev);				
+			  }
+			  else
+			  {
+				  if(sample_count)
+				  {
+					  for(ii=0;ii<NSAMPLE;ii++)
+					  {
+						  data_x[ii]=x;
+						  data_y[ii]=y;
+					  }
+				  }
+				  sample_count++;
+			  }
+			#else
+			  input_report_abs(data->input_dev, ABS_X, x);
+			  input_report_abs(data->input_dev, ABS_Y, y);
+			  input_report_abs(data->input_dev, ABS_PRESSURE, 1);
+			  input_sync(data->input_dev);
+			  px=x;
+			  py=y;
+			#endif
 			break;
 		case EVENT_RELEASE:
 			input_report_abs(data->input_dev, ABS_X, px);
 			input_report_abs(data->input_dev, ABS_Y, py);
 			input_report_abs(data->input_dev, ABS_PRESSURE, 0);
 			input_sync(data->input_dev);
+			#ifdef CONFIG_ENGICAM_MAX1180_CUSTOM
+			sample_count=0;
+			#endif
 			break;
 		case EVENT_FIFO_END:
 				break;
